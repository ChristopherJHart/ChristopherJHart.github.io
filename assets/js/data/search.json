[ { "title": "ICMP Redirects - How Data Plane Traffic Can Become Control Plane Traffic", "url": "/How-Data-Plane-Traffic-Can-Become-Control-Plane-Traffic/", "categories": "", "tags": "", "date": "2021-11-21 00:00:00 -0500", "snippet": " Note: If you are not familiar with the concepts of the data plane and control plane on network devices, I highly recommend reviewing my Understanding the Data, Control, and Management Planes of Network Devices post prior to reading this post. If you are not familiar with the concept of CoPP (Control Plane Policing) and how it can introduce packet loss for control plane traffic, I highly recommend reviewing my Understanding Control Plane Packet Loss due to CoPP post prior to reading this post.Network engineers often like to categorize a traffic flow as either data plane traffic, or control plane traffic. Under this framework, traffic is either data plane or control plane, it cannot be both. However, in reality, data plane traffic can become control plane traffic, which can cause increased latency or packet loss for the data plane traffic. In this post, we’ll explore how this is possible.First, let’s get familiar with our topology. We have a Cisco Nexus switch connected to two traffic generators via physical interfaces Ethernet1/45 and Ethernet1/46. One traffic generator mimics a host named Host-1 with an IP address of 192.168.1.100, while the other traffic generator mimics a host named Host-2 with an IP address of 192.168.1.200.The switch has an SVI (Switched Virtual Interface) in VLAN 1 with an IP address of 192.168.1.1. This is a /24 subnet.Switch# show ip interface briefIP Interface Status for VRF &quot;default&quot;(1)Interface IP Address Interface StatusVlan1 192.168.1.1 protocol-up/link-up/admin-up Switch# show running-config interface Vlan1!Command: show running-config interface Vlan1!Running configuration last done at: Sun Nov 21 16:53:53 2021!Time: Sun Nov 21 16:55:06 2021version 9.3(8) Bios:version 01.05 interface Vlan1 no shutdown ip address 192.168.1.1/24Both traffic generators are connected to the switch via access switchports in VLAN 1.Switch# show spanning-tree vlan 1VLAN0001 Spanning tree enabled protocol rstp Root ID Priority 32769 Address b08b.d00a.97f3 This bridge is the root Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 32769 (priority 32768 sys-id-ext 1) Address b08b.d00a.97f3 Hello Time 2 sec Max Age 20 sec Forward Delay 15 secInterface Role Sts Cost Prio.Nbr Type---------------- ---- --- --------- -------- --------------------------------Eth1/47 Desg FWD 2 128.185 P2p Eth1/48 Desg FWD 2 128.189 P2p In this topology, there are two UDP traffic flows. One is from Host-1 to Host-2, and the other is from Host-2 to Host-1. Both traffic flows send a single packet per second. At the moment, there is no packet loss for either flow.However, if we look at latency statistics for each traffic flow, we can see that the traffic flow from Host-1 to Host-2 has significantly higher latency (~0.6 milliseconds, or 6,000 microseconds) compared to the traffic flow from Host-2 to Host-1 (~2 microseconds).This particular Nexus switch is a Nexus 93180YC-FX. The data sheet for this switch suggests that this model of switch has sub-microsecond port-to-port latency capabilities: “The Cisco Nexus 93180YC-FX Switch (Figure 4) is a 1RU switch with latency of less than 1 microsecond that supports 3.6 Tbps of bandwidth and 1.4 bpps.”The fact that the traffic flow from Host-1 to Host-2 has significantly higher latency than advertised suggests something is going on with this traffic flow. Let’s investigate further by using the Embedded Logic Analyzer Module (ELAM) troubleshooting tool to dig into the ASIC’s forwarding decision for a packet within this traffic flow.Switch# debug platform internal tah elam asic 0Switch(TAH-elam)# trigger init Slot 1: param values: start asic 0, start slice 0, lu-a2d 1, in-select 6, out-select 0Switch(TAH-elam-insel6)# set outer ipv4 src_ip 192.168.1.100 dst_ip 192.168.1.200Switch(TAH-elam-insel6)# startSwitch(TAH-elam-insel6)# reportSUNDOWN1 ELAM REPORT SUMMARYslot - 1, asic - 0, slice - 0============================Incoming Interface: Eth1/45Src Idx : 0xb1, Src BD : 1Outgoing Interface Info: dmod 1, dpid 25Dst Idx : 0xb5, Dst BD : 1Packet Type: IPv4Dst MAC address: B0:8B:D0:0A:97:F3Src MAC address: 00:00:00:00:11:11Sup hit: 1, Sup Idx: 3561Dst IPv4 address: 192.168.1.200Src IPv4 address: 192.168.1.100Ver = 4, DSCP = 0, Don&#39;t Fragment = 0Proto = 17, TTL = 64, More Fragments = 0Hdr len = 20, Pkt len = 238, Checksum = 0xf582L4 Protocol : 17UDP Dst Port : 50000UDP Src Port : 25000Drop Info:----------LUA:LUB:LUC:LUD: IP_SELF_FWD_FAIILUREFinal Drops:vntag:vntag_valid : 0vntag_vir : 0vntag_svif : 0This output has three important pieces of information: The Dst MAC address line indicates the Ethernet header of this packet is addressed to a MAC address assigned to the SVI of the switch, not the MAC address of Host-2 (0000.0000.2222) even though both hosts are (theoretically) in the same subnet. The SUP hit line implies the ASIC is punting this packet from the data plane to the control plane. The IP_SELF_FWD_FAIILURE [sic] flag under the LUD section gives us a hint as to why the switch is punting this packet from the data plane to the control plane.The outgoing interface information present in this output suggests that the switch will eventually forward the packet out of Ethernet1/46 (which can be proven through the show system internal ethpm info all command), but the index corresponding with the supervisor hit (which can be decoded through the show system internal access-list sup-redirect-stats command) suggests there’s an exception causing this packet to be punted.Switch# show system internal ethpm info all | include dmod=1,dpid=25 IF_STATIC_INFO: port_name=Ethernet1/46,if_index:0x1a005a00,ltl=5964,slot=0, nxos_port=180,dmod=1,dpid=25,unit=0,queue=65535,xbar_unitbmp=0x0,ns_pid=255,slice_num=0,port_on_slice=25,src_id=50Switch# show system internal access-list sup-redirect-stats | include 356 3560 FWD Drop or MTU Exception 449If we review CoPP statistics on this switch with the show policy-map interface control-plane command, we can see that there are non-zero transmission statistics under the “copp-system-p-class-exception” class.Switch# show policy-map interface control-plane class copp-system-p-class-exceptionControl Plane Service-policy input: copp-system-p-policy-strict class-map copp-system-p-class-exception (match-any) match exception ip option match exception ip icmp unreachable match exception ipv6 option match exception ipv6 icmp unreachable set cos 1 police cir 150 kbps , bc 32000 bytes module 1 : transmitted 154200 bytes; 5-minute offered rate 260 bytes/sec conformed 315 peak-rate bytes/sec at Sun Nov 21 20:32:29 2021 dropped 0 bytes; 5-min violate rate 0 byte/sec violated 0 peak-rate byte/secFinally, if we use the Ethanalyzer control plane packet capture tool and filter it on packets sourced from or destined to 192.168.1.100 with the ethanalyzer local interface inband display-filter ip.addr==192.168.1.100 limit-captured-frames 0 command, we see two types of packets: The UDP data plane traffic sourced from Host-1 (192.168.1.100) destined to Host-2 (192.168.1.200), which is being punted to the control plane by the switch. ICMP Redirect packets sourced from the switch’s SVI (192.168.1.1) destined to Host-1 (192.168.1.100)Switch# ethanalyzer local interface inband display-filter ip.addr==192.168.1.100 limit-captured-frames 0Capturing on inband2021-11-21 20:45:27.872463 192.168.1.100 -&amp;gt; 192.168.1.200 UDP Source port: 25000 Destination port: 500002021-11-21 20:45:27.872833 192.168.1.1 -&amp;gt; 192.168.1.100 ICMP Redirect (Redirect for host)2021-11-21 20:45:27.872895 192.168.1.100 -&amp;gt; 192.168.1.200 UDP Source port: 25000 Destination port: 500002021-11-21 20:45:28.872503 192.168.1.100 -&amp;gt; 192.168.1.200 UDP Source port: 25000 Destination port: 500002021-11-21 20:45:28.872938 192.168.1.1 -&amp;gt; 192.168.1.100 ICMP Redirect (Redirect for host)2021-11-21 20:45:28.873010 192.168.1.100 -&amp;gt; 192.168.1.200 UDP Source port: 25000 Destination port: 500002021-11-21 20:45:29.872495 192.168.1.100 -&amp;gt; 192.168.1.200 UDP Source port: 25000 Destination port: 500002021-11-21 20:45:29.872945 192.168.1.1 -&amp;gt; 192.168.1.100 ICMP Redirect (Redirect for host)2021-11-21 20:45:29.873006 192.168.1.100 -&amp;gt; 192.168.1.200 UDP Source port: 25000 Destination port: 500002021-11-21 20:45:30.872495 192.168.1.100 -&amp;gt; 192.168.1.200 UDP Source port: 25000 Destination port: 500002021-11-21 20:45:30.872912 192.168.1.1 -&amp;gt; 192.168.1.100 ICMP Redirect (Redirect for host)2021-11-21 20:45:30.872984 192.168.1.100 -&amp;gt; 192.168.1.200 UDP Source port: 25000 Destination port: 5000012 packets capturedSwitch# Note: The above packet capture shows each UDP data plane packet twice for each ICMP Redirect message. This is because when the Ethanalyzer tool is run with the inband keyword, it captures packets entering or exiting the control plane. The first UDP data plane packet is shown as it enters the control plane through the supervisor’s inband interface after being punted from Ethernet1/45, while the second UDP data plane packet is shown as it exits the control plane through the supervisor’s inband interface after being forwarded by the software of the switch towards Ethernet1/46.It’s now clear what’s going on here. The switch is punting this traffic from the data plane to the control plane because it meets ICMP Redirect conditions. This behavior is described in more detail in Cisco’s Understanding ICMP Redirect Messages article written by my friend and colleague Nikolay Kartashev. Recall that the data plane is designed to forward traffic going through the network device at high speeds with low latency. Generally speaking, the data plane is not designed to craft packets sourced by the network device itself - that responsibility lies with the control plane. Therefore, the data plane must punt this packet to the control plane so that the control plane can create an ICMP Redirect packet to be sent back towards the source of this traffic.Thus far, the only symptom of this issue we’ve seen is high latency. However, another possible symptom you may observe as a result of this issue is packet loss. At the moment, our traffic flow is only 1 packet per second, which is very slow compared to a real traffic flow.Let’s increase the speed of this traffic flow from 1 packet per second to 1,000 packets per second.Now, we can see that the traffic flow from Host-1 to Host-2 has a significant amount of packet loss.If we re-check our CoPP statistics, we can now see drops under the copp-system-p-class-exception CoPP class. This is the root cause of the packet loss observed in this traffic flow.Switch# show policy-map interface control-plane class copp-system-p-class-exceptionControl Plane Service-policy input: copp-system-p-policy-strict class-map copp-system-p-class-exception (match-any) match exception ip option match exception ip icmp unreachable match exception ipv6 option match exception ipv6 icmp unreachable set cos 1 police cir 150 kbps , bc 32000 bytes module 1 : transmitted 892500 bytes; 5-minute offered rate 2860 bytes/sec conformed 3963 peak-rate bytes/sec at Sun Nov 21 20:49:13 2021 dropped 9055028 bytes; 5-min violate rate 50305 byte/sec violated 50305 peak-rate byte/sec at Sun Nov 21 20:49:13 2021Ultimately, the root cause of this issue is the fact that Host-1’s subnet mask is misconfigured as a /25 (255.255.255.128), when it should be a /24 (255.255.255.0). Therefore, when Host-1 needs to send traffic to Host-2, it recognizes that Host-2’s IP address (192.168.1.200) is outside of the 192.168.1.0/25 subnet, so it believes it needs to send this traffic to its default gateway, which is the switch.There are two tactics to fix this issue: Correct the subnet mask on Host-1. Disable ICMP redirects on the switch with the no ip redirects interface configuration command under the VLAN 1 SVI.Theoretically, the first tactic is the “correct” solution. However, as network engineers, we rarely have direct control over the configuration of hosts connected to the network, so we will adopt the second tactic.Switch# configure terminalEnter configuration commands, one per line. End with CNTL/Z.Switch(config)# interface Vlan1Switch(config-if)# no ip redirectsSwitch(config-if)# endSwitch# show running-config interface Vlan1!Command: show running-config interface Vlan1!Running configuration last done at: Sun Nov 21 20:51:06 2021!Time: Sun Nov 21 20:51:10 2021version 9.3(8) Bios:version 01.05 interface Vlan1 no shutdown no ip redirects ip address 192.168.1.1/24Now that we’ve applied this change, let’s verify whether we see our data plane traffic flow in the control plane using Ethanalyzer.Switch# ethanalyzer local interface inband display-filter ip.addr==192.168.1.100 limit-captured-frames 0Capturing on inband0 packets capturedSwitch# This traffic isn’t showing up in the control plane - let’s clear our CoPP statistics and verify if the copp-system-p-class-exception CoPP class is transmitting or dropping any traffic.Switch# clear copp statistics Switch# sleep 10Switch# show policy-map interface control-plane class copp-system-p-class-exceptionControl Plane Service-policy input: copp-system-p-policy-strict class-map copp-system-p-class-exception (match-any) match exception ip option match exception ip icmp unreachable match exception ipv6 option match exception ipv6 icmp unreachable set cos 1 police cir 150 kbps , bc 32000 bytes module 1 : transmitted 0 bytes; 5-minute offered rate 0 bytes/sec conformed 0 peak-rate bytes/sec dropped 0 bytes; 5-min violate rate 0 byte/sec violated 0 peak-rate byte/secOur CoPP statistics for this class are clean. Let’s confirm with an ELAM that a packet in this traffic flow is no longer being punted from the data plane to the control plane.Switch# debug platform internal tah elam asic 0Switch(TAH-elam)# trigger init Slot 1: param values: start asic 0, start slice 0, lu-a2d 1, in-select 6, out-select 0Switch(TAH-elam-insel6)# set outer ipv4 src_ip 192.168.1.100 dst_ip 192.168.1.200Switch(TAH-elam-insel6)# startSwitch(TAH-elam-insel6)# reportSUNDOWN1 ELAM REPORT SUMMARYslot - 1, asic - 0, slice - 0============================Incoming Interface: Eth1/45Src Idx : 0xb1, Src BD : 1Outgoing Interface Info: dmod 1, dpid 25Dst Idx : 0xb5, Dst BD : 1Packet Type: IPv4Dst MAC address: B0:8B:D0:0A:97:F3Src MAC address: 00:00:00:00:11:11Dst IPv4 address: 192.168.1.200Src IPv4 address: 192.168.1.100Ver = 4, DSCP = 0, Don&#39;t Fragment = 0Proto = 17, TTL = 64, More Fragments = 0Hdr len = 20, Pkt len = 238, Checksum = 0xf582L4 Protocol : 17UDP Dst Port : 50000UDP Src Port : 25000Drop Info:----------LUA:LUB:LUC:LUD:Final Drops:vntag:vntag_valid : 0vntag_vir : 0vntag_svif : 0We don’t see a SUP hit line in this output, which implies the ASIC is not punting this packet. We also don’t see any flags under the LUD section of this output the same way we did previously. This indicates the traffic is being forwarded through the data plane at high bandwidth with low latency without any involvement from the control plane.Let’s confirm this by reviewing the statistics for this traffic flow from the traffic generator’s perspective. We don’t see any packet loss:We also see low latency numbers for both traffic flows:Now that we’ve investigated and resolved this issue, you may have two final lingering questions: Why did Host-1 not honor the ICMP Redirect message generated by the switch? Why are ICMP Redirects enabled on network devices by default if ICMP Redirects can cause such huge latency and packet loss issues?I don’t have a great answer for the first question. In my experience, the overwhelming majority of hosts and network devices do not honor or modify their behavior according to incoming ICMP Redirect messages. My suspicion is that this is done for security - in the majority of circumstances, the host’s configured subnet mask takes precedence over incoming ICMP Redirect messages, as ICMP Redirect messages could be spoofed such that legitimate ICMP Redirect messages are indistinguishable from illegitimate ICMP Redirect messages.With respect to the second question, this behavior is mandated by the IETF through Section 5.2.7.2 of RFC 1812 (Requirements for IP Version 4 Routers): Routers MUST be able to generate the Redirect for Host message (Code 1) and SHOULD be able to generate the Redirect for Type of Service and Host message (Code 3) specified in [INTERNET:8].This is what I like to call an “RFC MUST”, which is defined in RFC 2119 (Key words for use in RFCs to Indicate Requirement Levels). As a result, network vendors (Cisco, Juniper, Arista, Dell, HPE, etc.) cannot disable this behavior by default without deviating from an RFC that defines one of the fundamentals of modern-day networking, even if such behavior would be a net positive for the networking world at large. As you can imagine, if one vendor deviated from the RFC, other vendors could have a field day with this by claiming that the first vendor is not RFC compliant with IPv4 networking. From an optics perspective, that looks really bad - after all, if you heard that a specific vendor didn’t fully support basic IPv4 networking in the modern day, your first instinct would probably be to avoid that vendor at all instead of investigating specific details behind this claim!Ultimately, this issue must be fixed through an IETF RFC that updates RFC 1812 (and the IPv6 equivalent, as I believe the behavior is identical with IPv6 and ICMPv6 Redirect messages).ConclusionAs demonstrated in this post, it is possible for data plane traffic to become control plane traffic in certain scenarios. Network devices that have some measure of control plane protection will most likely introduce increased latency or packet loss for this data plane traffic. One example scenario has to do with ICMP Redirects, although there exist other scenarios (such as ARP Gleaning) that can introduce a similar issue." }, { "title": "Understanding Control Plane Packet Loss due to CoPP", "url": "/Understanding-Control-Plane-Packet-Loss-due-to-CoPP/", "categories": "", "tags": "", "date": "2021-11-13 00:00:00 -0500", "snippet": " Note: If you are not familiar with the concepts of the data plane and control plane on network devices, I highly recommend reviewing my Understanding the Data, Control, and Management Planes of Network Devices post prior to reading this post.Network engineers often have to troubleshoot packet loss or connectivity issues across the network between hosts reported by customers. As part of troubleshooting this issue, network engineers often use ping to send ICMP Echo Request to various devices in the network, including intermediary network devices like switches and routers. During this troubleshooting, they may observe packet loss while pinging a network device and assume that it is related to the issue they are troubleshooting. In reality, this packet loss is not related to their issue and is expected behavior.In this post, we will dive into this behavior in more detail to explain why control plane packet loss such as this can be expected behavior and not necessarily indicative of an issue with the network device.First, let’s take a look at our topology. We have two hosts in different subnets that connect to a Cisco Nexus 9000 switch. One host connects via Ethernet1/1, and the other connects via Ethernet1/2. Ethernet1/1 has an IP of 192.168.10.1, while Ethernet1/2 owns 192.168.20.1.Let’s presume that you are troubleshooting a connectivity issue between both hosts in this topology. While troubleshooting, you perform a ping from the left-hand host owning 192.168.10.10 to the Nexus 9000 switch owning 192.168.10.1 and see packet loss similar to the below:As described in a previous blog post, the architecture of most network devices has three “planes” - a data plane, a control plane, and a management plane. This control plane packet loss scenario focuses on the interaction between the data plane and the control plane. Recall that the data plane handles traffic going through the device, while the control plane handles traffic going to the device.If we visualize the data plane and control plane of our switch within our topology, it would look like the diagram below. Notice how the control plane connects to the data plane through an inband interface. Also notice how the control plane hosts various software processes, such as ICMP.ICMP traffic between the two hosts flows through the data plane of the switch. This makes sense, because traffic between the two hosts will go through the switch - it is not destined to the switch.However, what if the switch gets an ICMP Echo Request packet destined to itself (e.g. 192.168.10.1)? The data plane will recognize that the switch itself owns IP 192.168.10.1 and forward the packet to the control plane’s inband interface. This action is called a “punt”.When the control plane receives this packet through the inband interface, it will inspect it and “route” it to the ICMP software process so that the ICMP process can handle it accordingly.The ICMP software process should generate an ICMP Echo Reply packet, which will be sent to the control plane’s inband interface, which is dequeued by the data plane and forwarded back out of Ethernet1/1 towards the host.However, what if the switch was receiving a lot of ICMP traffic all at once? For example, a malicious actor may be sending the switch more ICMP traffic than it can handle, or maybe a network monitoring system (NMS) is aggressively monitoring switch reachability through ICMP. This could clog the inband interface and control plane with unnecessary traffic or cause high CPU utilization, which would inadvertently affect other control plane protocols (such as BGP, OSPF, Spanning Tree Protocol, etc.) and cause instability in the network.This is where the concept of “Control Plane Protection” comes in. We need a mechanism to rate limit the amount of control plane traffic sent to a network device so that the control plane of the network device does not get overwhelmed with traffic. On Cisco Nexus switches, Control Plane Protection is primarily implemented through “Control Plane Policing” - a feature better known by its acronym, CoPP. This is enabled by default, but you can confirm it’s configured with the show copp status command, as shown below.CoPP is implemented within the data plane of the switch and enables the data plane to drop a specific class of traffic if the rate of traffic for that class exceeds a threshold. It’s essentially a QoS (Quality of Service) policer for the control plane. The output of the show policy-map interface control-plane command can show us how classes in the CoPP policy are organized, what type of traffic corresponds with each class, and each class’s policer rate.In our scenario, the “copp-system-p-class-monitoring” CoPP class handles ICMP traffic. We can see that by default, a 360 kbps CIR (Committed Information Rate) of ICMP traffic is allowed with a 128 kilobyte Bc (committed burst).We can also see that 32 megabytes of ICMP traffic has been allowed by this CoPP class, while about 279 megabytes of ICMP traffic has been dropped by this CoPP class since the last time the counters were cleared. Clearly, this switch is being blasted with ICMP traffic!As it turns out, I had another SSH session open to my host that was mindlessly slamming the Nexus with ICMP traffic. Oops!Now that I’ve stopped the other ping command, we can see that my original ping works as expected with no packet loss.This means that the packet loss observed while pinging the Nexus 9000 switch is not related to the connectivity issues between the two hosts in this network. The packet loss observed while pinging the Nexus 9000 switch was control plane traffic and was being dropped due to CoPP, while the connectivity issue between the two hosts involves data plane traffic and has a separate root cause.ConclusionThe moral of this story is that there is a fundamental difference between data plane traffic and control plane traffic. When you become aware of a connectivity or packet loss issue in your network, your first instinct will be to test connectivity between various points of your network. If this issue involves data plane traffic, make sure that your test traffic is also data plane traffic and not control plane traffic. Otherwise, your test traffic and your problematic traffic will yield fundamentally different results that could mislead your troubleshooting efforts..Similarly, when deploying a portion of your network for the first time, the proper way to validate that the network is working correctly is by testing with data plane traffic (e.g. ICMP pings between two hosts/endpoints connected to the network) instead of control plane traffic (e.g. ICMP pings between a host and the host’s default gateway). This doesn’t mean that every time you deploy a new network, you need to get access to a bunch of hosts to properly test connectivity - you can certainly still test basic connectivity using control plane traffic. However, if you see issues (especially packet loss) with your control plane traffic, you need to validate whether the issues are due to the network by testing with data plane traffic." }, { "title": "Understanding the Data, Control, and Management Planes of Network Devices", "url": "/Understanding-Data-Control-Management-Planes/", "categories": "", "tags": "", "date": "2021-11-12 00:00:00 -0500", "snippet": "While troubleshooting connectivity issues and packet loss in computer networks, network engineers often misunderstand the difference between the data plane and control plane. This can lead to faulty troubleshooting, as network engineers might attempt to correlate data plane connectivity issues with control plane connectivity issues. In this post, we will investigate the concepts of the data, control, and management plane and explore the differences between them through practical examples.First, let’s take a look at our topology. We have two hosts in different subnets that connect to a Cisco Nexus 9000. One host connects via Ethernet1/1, and the other connects via Ethernet1/2. Ethernet1/1 has an IP of 192.168.10.1, while Ethernet1/2 owns 192.168.20.1.The architecture of most network devices has three “planes”: Data plane Control plane Management planeIf we expand our view on the internal mechanisms of the Nexus 9000 switch, we can illustrate these three planes as shown here.In this image, notice three things: The control plane connects to the data plane through an inband interface. The control plane hosts various software processes, such as ICMP, BGP, and STP. The management plane also hosts various software processes used to manage or monitor the switch (such as SSH and SNMP), and the management plane is contained within the control plane. Note: In this topology, the management plane is depicted as a sub-section of the control plane. This is a bit of an opinionated view and isn’t necessarily true or factual - however, this is the way I like to visualize the difference between the management plane and the control plane, especially when we consider how features like Control Plane Policing (CoPP) and Hardware Rate Limiters can affect control plane and management plane traffic alike.Data PlaneThe data plane handles traffic going through the network device. This means one of two things: For unicast traffic, the destination IPv4 or IPv6 field of traffic entering the device is not set to an IPv4 or IPv6 address assigned to the network device. For link-local multicast traffic, the destination IPv4 or IPv6 field of traffic entering the device is not set to an IPv4 or IPv6 address that the network device is listening for.A practical example of data plane traffic in our topology is ICMP traffic between the two hosts. This makes sense, because traffic between the two hosts will go through the switch - it is not destined to the switch.Control PlaneThe control plane handles traffic going to the network device. This means one of two things: For unicast traffic, the destination IPv4 or IPv6 field of traffic entering the device is set to an IPv4 or IPv6 address assigned to the network device. For link-local multicast traffic, the destination IPv4 or IPv6 field of traffic entering the device is set to an IPv4 or IPv6 address that the network device is listening for.A practical example of control plane traffic in our topology is ICMP traffic destined to the network device itself. If the network device receives an ICMP Echo Request packet destined to an IP address of 192.168.10.1 (which the network device is assigned), the data plane will recognize that the network device itself owns this IP address and forward the packet to the control plane’s inband interface. This action is called a “punt”.When the control plane receives this ICMP Echo Request packet through the inband interface, it will inspect it and “route” it to the ICMP software process so that the ICMP process can handle it accordingly.The ICMP software process should generate an ICMP Echo Reply packet, which will be sent to the control plane’s inband interface, which is dequeued by the data plane and forwarded back out of Ethernet1/1 towards the host.Other common examples of control plane traffic includes routing protocol traffic (such as OSPF, EIGRP, BGP, or PIM packets) and Layer 2 protocols (such as Spanning Tree Protocol, LACP, CDP, or LLDP frames).Management PlaneThe management plane handles traffic going to the network device that is designed to configure, manage, or monitor the network device. Put another way, management plane traffic can be qualified the same way as control plane traffic, but the purpose of the traffic is to configure, manage, or monitor the network device.A practical example of management plane traffic in our topology is SSH traffic destined to the network device itself. If the network device receives an ICMP Echo Request packet destined to an IP address of 192.168.10.1 (which the network device is assigned), the data plane will recognize that the network device itself owns this IP address and forward the packet to the control plane’s inband interface. This action is called a “punt”.When the control plane receives this SSH packet through the inband interface, it will inspect it and “route” it to the SSH software process so that the SSH process can handle it accordingly.The SSH software process should generate some SSH traffic in reply, which will be sent to the control plane’s inband interface, which is dequeued by the data plane and forwarded back out of Ethernet1/1 towards the host.Other common examples of management plane traffic includes SNMP traffic (which can be used to monitor the network device as well as configure the device), NETCONF traffic, and gRPC traffic (which can be used to monitor the network device through model-driven telemetry).Some network devices have a dedicated out-of-band management port that is primarily capable of sending and receiving management plane traffic. Sometimes, this management port can send or receive LLDP or CDP, but rarely do they support other types of control plane protocols (such as Spanning Tree Protocol, routing protocols like OSPF/EIGRP/BGP, etc.)Control Plane Traffic is RelativeAn important concept to keep in mind is that “control plane traffic” is a relative term. A packet can be control plane traffic from the perspective of one device, but data plane traffic from the perspective of another device.Let’s demonstrate this concept with a practical example. Consider the below topology.Let’s say an ICMP Echo Request packet is generated by the left-hand host that owns IP address 192.168.10.10. This packet is destined to IP address 100.2.2.2 assigned to R2. When this packet enters R1, R1 will recognize (based on the destination IP address) that the packet need to go through R1, so this ICMP packet will be data plane traffic from R1’s perspective.However, when this ICMP packet enters R2, R2 will recognize that the destination IP address of the ICMP packet is assigned to R2, which indicates that the packet is for R2. R2 will punt this packet from the data plane to the control plane. Thus, this ICMP packet will be control plane traffic from R2’s perspective.To summarize - one device’s control plane traffic is another device’s data plane traffic.This concept is important to keep in mind when troubleshooting issues reported by customers, such as packet loss or connectivity issues. The root cause of data plane packet loss can be different from the root cause of control plane packet loss, or it could be related.ConclusionThe purpose of this post is to define and illustrate the architectural differences between the data plane, control plane, and management plane of most network devices through practical examples. In future posts, we will demonstrate how these differences can cause unanticipated (but expected!) network device behavior." }, { "title": "Understanding Load Balancing on Network Devices", "url": "/Understanding-Load-Balancing/", "categories": "", "tags": "", "date": "2021-10-24 00:00:00 -0400", "snippet": "A common misunderstanding engineers have about Equal-Cost Multi-Pathing (ECMP) and port-channels is that they increase the bandwidth that can be used between two network devices. This can be true, but isn’t always true. In this post, we’ll explore an example scenario where the total bandwidth is not increased as a result of implementing a port-channel, as well as how load-balancing really works on most network devices.First, let’s get to know our topology. We have three Cisco Nexus switches - Switch-1, Router, and Switch-2 - that are connected in a series. Two traffic generators are connected to Switch-1 and Switch-2 through physical interface Ethernet1/36. Switch-1 and Switch-2 connect to Router through Layer 2 port-channels - port-channel1 connects Switch-1 and Router together, while port-channel2 connects Switch-2 and Router together.As the names suggest, Switch-1 and Switch-2 are purely Layer 2 switches. Router is a router that routes between two networks - 192.168.1.0/24, and 192.168.2.0/24. The traffic generator mimics four hosts - two in 192.168.1.0/24, two in 192.168.2.0/24.Let’s say Host-1 (192.168.1.10) sends a packet to Host-3 (192.168.2.10). Switch-1 will inspect the destination MAC address of this packet and know it needs to forward it out of logical interface port-channel1. However, how does Switch-1 know whether to use Ethernet1/1 or Ethernet1/2?Switch-1 will use a process called hashing to figure out this problem. Hashing is when a network device selects one physical interface out of a group to use when forwarding a specific packet. The method a network device uses to perform hashing is called a hashing algorithm. Hashing algorithms are platform-specific (meaning, they will change depending on the type of switch) and are considered proprietary (meaning, network vendors like Cisco, Juniper, and Arista will never release the hashing algorithm they use in their products to the public.)One set of inputs for the hashing algorithm is the number of interfaces in the port-channel/ECMP group. Another set of inputs is information about the packet that needs to be forwarded, which we call a flow. Simply put, a flow is a set of attributes that uniquely identify one packet from other packets. To use the same terms defined by Cisco’s NetFlow protocol, each attribute is called a field. Each network device in the path of a particular set of traffic can define a flow differently using a tuple of fields called key fields.In other words, one device may say that a unique flow consists of the source and destination MAC address key fields, while another device may say that a unique flow consists of the source and destination MAC address and IP address key fields.For a practical example of this concept, let’s two ICMP Echo Request packets - one sent from Host-1 to Host-3, and another sent from Host-1 to Host-4. If we were to capture these packets as they enter Switch-1, their headers would look like this.As you can see, the only difference between these two sets of packets is the destination IP address. However, if Switch-1 considers only the source and destination MAC address fields to be key fields, then SWITCH-1 would consider both traffic patterns to be identical flows, even though they’re destined to two different IP addresses.Most network devices have a command that let’s you see what key fields it considers in its hashing algorithm. On NX-OS, this command is show port-channel load-balance. On Cisco IOS, this command is show etherchannel load-balance.Note that even though Switch-1 is a Layer 2 switch, its Application-Specific Integrated Circuit (ASIC) is perfectly capable of parsing Layer 3 and Layer 4 headers of incoming packets in addition to Layer 2 headers. Just because Switch-1 is a Layer 2 switch doesn’t mean it isn’t able to read/understand IP addresses and TCP/UDP headers - it just means it won’t make forwarding decisions based on Layer 3 or Layer 4 headers. However, Switch-1 will factor this data into its hashing algorithm.In our topology, both Host-1 and Host-2 are continuously sending traffic to both Host-3 and Host-4 in a full-mesh fashion. We can use interface counters on Switch-1 to see how traffic is hashing on Switch-1.As you can see, all traffic is traversing Ethernet1/1 of Switch-1. Ethernet1/2 is completely unused, even though it’s up/up and bundled within port-channel1.What’s going on here? Is this a bug? Do I refund my expensive data center switches, since they’re clearly broken?Nope! This is 100% expected behavior. Simply put, we’re getting “lucky” (or unlucky, depending on your perspective) with the hashing algorithm. All of our traffic happens to hash to the same physical interface within the bundle - an event we like to call “polarization”.This means that even though two 10Gbps interfaces are bundled together, you may not get 20Gbps of bandwidth out of the bundle. If the majority of your flows (or at least your high-bandwidth flows) hash to one member of the port-channel, you’re still oversubscribed.In my scenario, the packets generated by the traffic generator do not have a Layer 4 header.Since Switch-1’s hashing algorithm can use Layer 3 and Layer 4 headers, let’s add a UDP header with randomized ports to add some entropy to our traffic flow.Now that we have a Layer 4 header to work with, we can see the traffic is very nicely load-balanced across Ethernet1/1 and Ethernet1/2! With this traffic pattern, we should be able to squeeze 20Gbps of bandwidth out of this port-channel.Next, you may want to know exactly how hashing works. As stated before, the exact hashing algorithm used by a switch is proprietary information. However, at a high level, the switch will do some quick math on the relevant headers of the packet (selected based upon the port-channel’s load-balancing algorithm) and the algorithm will spit out an integer number. Let’s say the number the algorithm spits out is between 0 and 7.Internally, the network device will assign each physical interface in the port-channel or ECMP group a number. In our example, Ethernet1/1 may be internally assigned 0, 1, 2, and 3. Ethernet1/2 may be internally assigned 4, 5, 6, and 7.If the number spit out by the algorithm is 0, 1, 2, or 3, then the switch will forward the packet out of Ethernet1/1. If the number spit out by the algorithm is 4, 5, 6, or 7, then the switch will forward the packet out of Ethernet1/2.In the case of unequal-cost multipathing (also called “unequal-cost load balancing” by some technologies, such as EIGRP), you will have two paths. Path 1 might have a poorer metric, so internally it’ll be given hashes 0 and 1. Path 2 might have a better metric, so internally it’ll be given hashes 2, 3, 4, 5, 6, and 7. If the number spit out by the algorithm when run against a flow is 0 or 1, then Path 1 will be taken. If the number spit out by the algorithm when run against a flow is 2, 3, 4, 5, 6, or 7, then Path 2 will be taken.This algorithm is not aware of the amount of traffic that belongs to a flow. The flow could be a few kilobits per second, which would probably be fine to flow down Path 1. It could also be several gigabits per second, which could cause congestion further down the path. The router doesn’t keep track of how much traffic is present in a flow (or at least, if it does via sFlow or NetFlow, the data gathered by that technology does not impact the router’s forwarding decision made on that packet/flow).This is also why vendors recommend that when you use ECMP or port-channels, you have a number of interfaces equal to some power of two (such as 2, 4, 8, 16, etc.) within the ECMP or port-channel. Using some other number (such as 3, 6, etc.) will result in one or more interfaces being internally assigned less hash values than other interfaces, resulting in unequal-cost load balancing." }, { "title": "Normalizing JSON Data Structure Output on Cisco NX-OS with Python", "url": "/Normalizing-JSON-Data-Structure-Output-On-Cisco-NX-OS-With-Python/", "categories": "", "tags": "", "date": "2021-03-16 00:00:00 -0400", "snippet": "Earlier this year, Ivan Pepelnjak wrote a blog post on how the way network operating systems (including Cisco’s NX-OS) convert XML-based data structures to JSON can cause certain keys to be either a dictionary or a list, depending on the quantity of elements nested within a parent element. Ivan’s blog post does an excellent job of providing multiple workarounds for this issue, such as using an Ansible filter or using NX-API with the cli_array method to normalize the data. However, neither of these workarounds are applicable to you if you have either of the following use cases: You need to parse structured output from a Nexus switch received via SSH (such as with the Netmiko or Scrapli libraries). You need to parse strucutred output from a Nexus switch using a on-the-box Python script.The purpose of this post is twofold: Demonstrate this problem where JSON output from NX-OS may contain either a dictionary or a list, depending on the quantity of elements nested within a parent element. Provide a Python 3 utility function that can normalize this data for the aforementioned use cases instead of leveraging NX-API or Ansible.The ProblemIvan’s blog post does an excellent job of demonstrating this problem, but to recap, I’ll demonstrate my own example of the issue. This example was recreated using Nexus 9300v switches in CML2.1.Consider a very simple topology where two Nexus 9000 switches (hostnames N9K-1 and N9K-2) are connected to each other via routed interface Ethernet1/1. An EIGRP process in ASN 1 is activated on Ethernet1/1.N9K-1# show ip interface briefIP Interface Status for VRF &quot;default&quot;(1)Interface IP Address Interface StatusLo0 100.1.1.1 protocol-up/link-up/admin-upEth1/1 10.1.0.0 protocol-up/link-up/admin-upN9K-1# show cdp neighbors interface Ethernet1/1Capability Codes: R - Router, T - Trans-Bridge, B - Source-Route-Bridge S - Switch, H - Host, I - IGMP, r - Repeater, V - VoIP-Phone, D - Remotely-Managed-Device, s - Supports-STP-DisputeDevice-ID Local Intrfce Hldtme Capability Platform Port IDN9K-2(9JXT8T8H5KL) Eth1/1 133 R S s N9K-C9300v Eth1/1Total entries displayed: 1N9K-2# show ip interface briefIP Interface Status for VRF &quot;default&quot;(1)Interface IP Address Interface StatusLo0 100.2.2.2 protocol-up/link-up/admin-upEth1/1 10.1.0.1 protocol-up/link-up/admin-upN9K-2# show cdp neighbors interface Ethernet1/1Capability Codes: R - Router, T - Trans-Bridge, B - Source-Route-Bridge S - Switch, H - Host, I - IGMP, r - Repeater, V - VoIP-Phone, D - Remotely-Managed-Device, s - Supports-STP-DisputeDevice-ID Local Intrfce Hldtme Capability Platform Port IDN9K-1(9EKQZIXEMGZ) Eth1/1 149 R S s N9K-C9300v Eth1/1Total entries displayed: 1N9K-1# show running-config eigrp&amp;lt;snip&amp;gt;feature eigrprouter eigrp 1interface loopback0 ip router eigrp 1interface Ethernet1/1 ip router eigrp 1N9K-2# show running-config eigrp&amp;lt;snip&amp;gt;feature eigrprouter eigrp 1interface loopback0 ip router eigrp 1interface Ethernet1/1 ip router eigrp 1As expected, an EIGRP adjacency has formed between the two switches through Ethernet1/1.N9K-1# show ip eigrp neighborsIP-EIGRP neighbors for process 1 VRF defaultH Address Interface Hold Uptime SRTT RTO Q Seq (sec) (ms) Cnt Num0 10.1.0.1 Eth1/1 12 00:45:45 6 50 0 4N9K-2# show ip eigrp neighborsIP-EIGRP neighbors for process 1 VRF defaultH Address Interface Hold Uptime SRTT RTO Q Seq (sec) (ms) Cnt Num0 10.1.0.0 Eth1/1 10 00:45:42 16 96 0 4If we analyze the output of the show ip eigrp neighbors command in a JSON data structure with the, we can see that all keys with the phrase “ROW_” in it (such as ROW_asn, ROW_vrf, and ROW_peer) have a corresponding value that is a dictionary.{ &quot;TABLE_asn&quot;: { &quot;ROW_asn&quot;: { &quot;asn&quot;: &quot;1&quot;, &quot;TABLE_vrf&quot;: { &quot;ROW_vrf&quot;: { &quot;vrf&quot;: &quot;default&quot;, &quot;TABLE_peer&quot;: { &quot;ROW_peer&quot;: { &quot;peer_handle&quot;: &quot;0&quot;, &quot;peer_ipaddr&quot;: &quot;10.1.0.1&quot;, &quot;peer_ifname&quot;: &quot;Eth1/1&quot;, &quot;peer_holdtime&quot;: &quot;13&quot;, &quot;peer_srtt&quot;: &quot;6&quot;, &quot;peer_rto&quot;: &quot;50&quot;, &quot;peer_xmitq_count&quot;: &quot;0&quot;, &quot;peer_last_seqno&quot;: &quot;4&quot;, &quot;peer_uptime&quot;: &quot;PT46M49S&quot; } } } } } }}Next, let’s create a new EIGRP process in ASN 2 on both switches and activate this new EIGRP process on Ethernet1/1.N9K-1# configure terminalEnter configuration commands, one per line. End with CNTL/Z.N9K-1(config)# router eigrp 2N9K-1(config-router)# interface Ethernet1/1N9K-1(config-if)# ip router eigrp 2N9K-1(config-if)# endN9K-1#N9K-2# configure terminalEnter configuration commands, one per line. End with CNTL/Z.N9K-2(config)# router eigrp 2N9K-2(config-router)# interface Ethernet1/1N9K-2(config-if)# ip router eigrp 2N9K-2(config-if)# endN9K-2#We can see that there are two EIGRP adjacencies formed over Ethernet1/1 - one in EIGRP process 1, the other in EIGRP process 2.N9K-1# show ip eigrp neighborsIP-EIGRP neighbors for process 1 VRF defaultH Address Interface Hold Uptime SRTT RTO Q Seq (sec) (ms) Cnt Num0 10.1.0.1 Eth1/1 11 00:49:03 6 50 0 4IP-EIGRP neighbors for process 2 VRF defaultH Address Interface Hold Uptime SRTT RTO Q Seq (sec) (ms) Cnt Num0 10.1.0.1 Eth1/1 13 00:00:13 7 50 0 3N9K-2# show ip eigrp neighborsIP-EIGRP neighbors for process 1 VRF defaultH Address Interface Hold Uptime SRTT RTO Q Seq (sec) (ms) Cnt Num0 10.1.0.0 Eth1/1 12 00:49:06 16 96 0 4IP-EIGRP neighbors for process 2 VRF defaultH Address Interface Hold Uptime SRTT RTO Q Seq (sec) (ms) Cnt Num0 10.1.0.0 Eth1/1 14 00:00:16 1283 5000 0 3Let’s take another look at the JSON output of the show ip eigrp neighbors command.{ &quot;TABLE_asn&quot;: { &quot;ROW_asn&quot;: [ { &quot;asn&quot;: &quot;1&quot;, &quot;TABLE_vrf&quot;: { &quot;ROW_vrf&quot;: { &quot;vrf&quot;: &quot;default&quot;, &quot;TABLE_peer&quot;: { &quot;ROW_peer&quot;: { &quot;peer_handle&quot;: &quot;0&quot;, &quot;peer_ipaddr&quot;: &quot;10.1.0.1&quot;, &quot;peer_ifname&quot;: &quot;Eth1/1&quot;, &quot;peer_holdtime&quot;: &quot;12&quot;, &quot;peer_srtt&quot;: &quot;6&quot;, &quot;peer_rto&quot;: &quot;50&quot;, &quot;peer_xmitq_count&quot;: &quot;0&quot;, &quot;peer_last_seqno&quot;: &quot;4&quot;, &quot;peer_uptime&quot;: &quot;PT1H9M33S&quot; } } } } }, { &quot;asn&quot;: &quot;2&quot;, &quot;TABLE_vrf&quot;: { &quot;ROW_vrf&quot;: { &quot;vrf&quot;: &quot;default&quot;, &quot;TABLE_peer&quot;: { &quot;ROW_peer&quot;: { &quot;peer_handle&quot;: &quot;0&quot;, &quot;peer_ipaddr&quot;: &quot;10.1.0.1&quot;, &quot;peer_ifname&quot;: &quot;Eth1/1&quot;, &quot;peer_holdtime&quot;: &quot;10&quot;, &quot;peer_srtt&quot;: &quot;7&quot;, &quot;peer_rto&quot;: &quot;50&quot;, &quot;peer_xmitq_count&quot;: &quot;0&quot;, &quot;peer_last_seqno&quot;: &quot;3&quot;, &quot;peer_uptime&quot;: &quot;PT20M43S&quot; } } } } } ] }}We can see that the value of the ROW_asn key is now a list, not a dictionary. This is problematic from a Python perspective because the way that one consumes the data in a dictionary is different from the way that one consumes the data in a list. It’s not impossible to write code that can handle scenarios where the value of a dictionary key is either a dictionary or a list, but doing so can be difficult to consume, maintain, and test.It would be much easier for us if every key containing the phrase “ROW_” was a list - whether it contains one element, or multiple elements. If you are running NX-OS software release 9.3(1) or later, you can use the json native pipe instead of the json pipe to accomplish this, as shown below.N9K-1# show ip eigrp neighbors | json-pretty native{ &quot;TABLE_asn&quot;: { &quot;ROW_asn&quot;: [ { &quot;asn&quot;: 1, &quot;TABLE_vrf&quot;: { &quot;ROW_vrf&quot;: [ { &quot;vrf&quot;: &quot;default&quot;, &quot;TABLE_peer&quot;: { &quot;ROW_peer&quot;: [ { &quot;peer_handle&quot;: 0, &quot;peer_ipaddr&quot;: &quot;10.1.0.1&quot;, &quot;peer_ifname&quot;: &quot;Eth1/1&quot;, &quot;peer_holdtime&quot;: 13, &quot;peer_srtt&quot;: 6, &quot;peer_rto&quot;: 50, &quot;peer_xmitq_count&quot;: 0, &quot;peer_last_seqno&quot;: 4, &quot;peer_uptime&quot;: &quot;PT16H7M38S&quot; } ] } } ] } }, { &quot;asn&quot;: 2, &quot;TABLE_vrf&quot;: { &quot;ROW_vrf&quot;: [ { &quot;vrf&quot;: &quot;default&quot;, &quot;TABLE_peer&quot;: { &quot;ROW_peer&quot;: [ { &quot;peer_handle&quot;: 0, &quot;peer_ipaddr&quot;: &quot;10.1.0.1&quot;, &quot;peer_ifname&quot;: &quot;Eth1/1&quot;, &quot;peer_holdtime&quot;: 13, &quot;peer_srtt&quot;: 7, &quot;peer_rto&quot;: 50, &quot;peer_xmitq_count&quot;: 0, &quot;peer_last_seqno&quot;: 3, &quot;peer_uptime&quot;: &quot;PT15H18M47S&quot; } ] } } ] } } ] }}However, at the time of this writing, NX-OS 9.3(1) and later are the upcoming long-lived release, not the current recommended NX-OS software release. If you are not yet running NX-OS software where the json native pipe is available, you’ll need an alternative solution.The SolutionThe normalize_output utility function below modifies a dictionary input (which will be your JSON data structure obtained through NX-OS Python libraries) such that all dictionary keys containing the phrase “ROW_” are converted to lists of dictionaries. The modified dictionary input is then returned for further analysis.def normalize_output(input: dict) -&amp;gt; dict: for k, v in input.items(): if &quot;ROW_&quot; in k and isinstance(v, dict): input[k] = [normalize_output(v)] elif isinstance(v, dict) and any(&quot;ROW_&quot; in x for x in v.keys()): input[k] = normalize_output(v) # Taste to see if dictionary value is a list and if the list # contains dictionaries. This prevents us from needlessly normalizing # leaf nodes in the data structure. elif isinstance(v, list) and isinstance(v[0], dict): for index, item in enumerate(v): input[k][index] = normalize_output(item) return inputThis utility function and its corresponding unit tests can be found in the Normalize NX-OS JSON Data Structures GitHub repository.If we run the structured output of the show ip eigrp neighbors command from a switch with multiple EIGRP processes configured through this utility function, we’ll have the data structure shown below.{ &quot;TABLE_asn&quot;: { &quot;ROW_asn&quot;: [ { &quot;asn&quot;: &quot;1&quot;, &quot;TABLE_vrf&quot;: { &quot;ROW_vrf&quot;: [ { &quot;vrf&quot;: &quot;default&quot;, &quot;TABLE_peer&quot;: { &quot;ROW_peer&quot;: [ { &quot;peer_handle&quot;: &quot;0&quot;, &quot;peer_ipaddr&quot;: &quot;10.1.0.1&quot;, &quot;peer_ifname&quot;: &quot;Eth1/1&quot;, &quot;peer_holdtime&quot;: &quot;12&quot;, &quot;peer_srtt&quot;: &quot;6&quot;, &quot;peer_rto&quot;: &quot;50&quot;, &quot;peer_xmitq_count&quot;: &quot;0&quot;, &quot;peer_last_seqno&quot;: &quot;4&quot;, &quot;peer_uptime&quot;: &quot;PT1H9M33S&quot; } ] } } ] } }, { &quot;asn&quot;: &quot;2&quot;, &quot;TABLE_vrf&quot;: { &quot;ROW_vrf&quot;: [ { &quot;vrf&quot;: &quot;default&quot;, &quot;TABLE_peer&quot;: { &quot;ROW_peer&quot;: [ { &quot;peer_handle&quot;: &quot;0&quot;, &quot;peer_ipaddr&quot;: &quot;10.1.0.1&quot;, &quot;peer_ifname&quot;: &quot;Eth1/1&quot;, &quot;peer_holdtime&quot;: &quot;10&quot;, &quot;peer_srtt&quot;: &quot;7&quot;, &quot;peer_rto&quot;: &quot;50&quot;, &quot;peer_xmitq_count&quot;: &quot;0&quot;, &quot;peer_last_seqno&quot;: &quot;3&quot;, &quot;peer_uptime&quot;: &quot;PT20M43S&quot; } ] } } ] } } ] }}Although this data structure is larger, traversing through this data structure in Python is significantly easier. We can safely assume that all dictionary keys with the phrase “ROW_” have a value that is a list. This let’s us iterate through the data using a for loop instead of tasting the dictionary’s value and using isinstance() to correctly handle the data.ExamplesShowcasing the purpose and use case of this utility function is best done through examples. The below three examples involve a scenario where you need to build some automation that reports the number of EIGRP adjacencies across your entire fleet of Nexus 9000 switches. Each example works within different business requirements that mold the implementation of the automation solution.Example One - JSON Output From NetmikoThe business requirements provided to you for this automation restricts you from gathering this information via NX-API or SNMP, but allows access to the switch via SSH.An example of the Python script you might build for this task can be found in the Examples folder of the Normalize NX-OS JSON Data Structures GitHub repository. The corresponding unit tests for this script can be found in the Tests folder of the same repository.Example Two - JSON Output From ScrapliThe business requirements provided to you for this automation restricts you from gathering this information via NX-API or SNMP, but allows access to the switch via SSH. Your boss also dislikes open-source software created by people named Kirk, for some odd reason.An example of the Python script you might build for this task can be found in the Examples folder of the Normalize NX-OS JSON Data Structures GitHub repository. The corresponding unit tests for this script can be found in the Tests folder of the same repository.Example Three - On-The-Box PythonThe business requirements provided to you for this automation require you to use an on-the-box Python script to gather this information, as you are not allowed to use NX-API, SNMP, or SSH to access the switch.An example of the Python script you might build for this task can be found in the Examples folder of the Normalize NX-OS JSON Data Structures GitHub repository. The corresponding unit tests for this script can be found in the Tests folder of the same repository." }, { "title": "Windows 10 OpenSSH Equivalent of ssh-copy-id", "url": "/Windows-10-ssh-copy-id/", "categories": "", "tags": "", "date": "2020-05-24 00:00:00 -0400", "snippet": "At the moment, Windows 10’s implementation of the OpenSSH client does not have the ssh-copy-id command available. However, a PowerShell one-line command can mimic the ssh-copy-id command and allow you to copy an SSH public key generated by the ssh-keygen command to a remote Linux device for passwordless login.Generate an SSH KeyNote: If you have already generated an SSH keypair that you would like to use, skip this section and proceed to the Copy SSH Key to Remote Linux Device section.First, open a new PowerShell window (not a Command Prompt window!) and generate a new SSH keypair with the ssh-keygen command. By default, the public and private keys will be placed in the %USERPROFILE%/.ssh/ directory. The public key file we are interested in is named id_rsa.pub.PS C:\\Users\\Christopher&amp;gt; ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (C:\\Users\\Christopher/.ssh/id_rsa):Created directory &#39;C:\\Users\\Christopher/.ssh&#39;.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in C:\\Users\\Christopher/.ssh/id_rsa.Your public key has been saved in C:\\Users\\Christopher/.ssh/id_rsa.pub.The key fingerprint is:SHA256:/mjkrJOQbRzCAwlSPYVBNcuxntm/Ms5/MMC15dCRrMc christopher@Christopher-Win10-VM-01The key&#39;s randomart image is:+---[RSA 2048]----+|oo.+o== o.o ||. o +. = o = || o .+. . B || +..+o o E || *+.S. . || o +...o || o =. .o || o.*o .. || .=+++. |+----[SHA256]-----+PS C:\\Users\\Christopher&amp;gt;Copy SSH Key to Remote Linux DeviceNext, we use the below PowerShell one-line command to copy the contents of the id_rsa.pub public key to a remote Linux device. Replace the {IP-ADDRESS-OR-FQDN} with the IP address or FQDN (Fully Qualified Domain Name) of the remote Linux device you would like to copy the public key to.type $env:USERPROFILE\\.ssh\\id_rsa.pub | ssh {IP-ADDRESS-OR-FQDN} &quot;cat &amp;gt;&amp;gt; .ssh/authorized_keys&quot;An example of this command is shown below. In this example, I am copying the contents of the id_rsa.pub public key to a remote Linux device at IP address 192.168.30.31.PS C:\\Users\\Christopher&amp;gt; type $env:USERPROFILE\\.ssh\\id_rsa.pub | ssh 192.168.30.31 &quot;cat &amp;gt;&amp;gt; .ssh/authorized_keys&quot;The authenticity of host &#39;192.168.30.31 (192.168.30.31)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:mTD0/WNCVZ/p/PFSkNDmLJtzIGb5eD7qj6erOQkomjM.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &#39;192.168.30.31&#39; (ECDSA) to the list of known hosts.christopher@192.168.30.31&#39;s password:PS C:\\Users\\Christopher&amp;gt;Test Passwordless SSH Connectivity to Remote Linux DeviceFinally, verify that you can SSH to the remote Linux device with the ssh command. An example to a remote Linux device at IP address 192.168.30.31 is shown below. Note how a password did not need to be entered in order for us to establish SSH connectivity to the remote Linux device.PS C:\\Users\\Christopher&amp;gt; ssh 192.168.30.31Last login: Sat May 23 12:44:51 2020 from 192.168.10.139[christopher@linux ~]$ whochristopher pts/0 2020-05-24 19:35 (192.168.10.113)ReferencesThe instructions for this blog post were heavily inspired by Scott Hanselman’s blog post on the subject." }, { "title": "Quick Lab - RIPv2 Auto Summary", "url": "/Quick-Lab-RIPv2-Auto-Summary/", "categories": "", "tags": "", "date": "2019-12-27 00:00:00 -0500", "snippet": "RIPv2’s automatic network summarization feature is easy to misunderstand, which can be a recipe for disaster in a production environment or on the CCIE R&amp;amp;S lab exam. Let’s analyze the exact behavior behind this feature by experimenting with it in a quick lab!ScopeIn this lab, we seek answers to the following question: What scenario(s) will cause RIPv2 automatically summarize networks? What is a classful network boundary, and why does RIPv2 summarize around them? TopologyLab MaterialsThis lab was completed with a VIRL 1.6.65 server using the IOSv 15.7(3)M3 node.Default ConfigurationBoth nodes are configured with their hostname, RIPv2 that advertises all up/up interfaces with Auto-Summary enabled, and other utility configuration by default. R1’s default configuration includes configuration for the Gi0/1 interface and five loopback interfaces, as shown below. Note that the loopback interfaces are explicitly configured as passive interfaces - this is to ensure RIPv2 debug output later in the lab is clean, as otherwise RIPv2 will attempt to send update messages out of each loopback interface every 30 seconds.hostname R1no ip domain-lookupservice timestamps debug datetime msecservice timestamps log datetime mseclogging buffered 10000000interface GigabitEthernet0/0 shutdowninterface GigabitEthernet0/1 no shutdown ip address 10.0.0.1 255.255.255.252interface Loopback0 no shutdown ip address 192.168.1.1 255.255.255.0interface Loopback1 no shutdown ip address 192.168.2.1 255.255.255.128interface Loopback2 no shutdown ip address 192.168.2.129 255.255.255.128interface Loopback3 no shutdown ip address 10.0.10.1 255.255.254.0interface Loopback4 no shutdown ip address 10.4.0.1 255.252.0.0router rip version 2 passive-interface Loopback0 passive-interface Loopback1 passive-interface Loopback2 passive-interface Loopback3 passive-interface Loopback4 network 192.168.1.0 network 192.168.2.0 network 10.0.0.0line console 0 logging synchronous exec-timeout 0 0R2’s default configuration includes similar configuration for RIPv2 and the Gi0/1 interface, as shown below.hostname R2no ip domain-lookupservice timestamps debug datetime msecservice timestamps log datetime mseclogging buffered 10000000interface GigabitEthernet0/0 shutdowninterface GigabitEthernet0/1 no shutdown ip address 10.0.0.2 255.255.255.252router rip version 2 auto-summary network 10.0.0.0line console 0 logging synchronous exec-timeout 0 0LabFirst, let’s verify that all of R1’s interfaces are up/up, including the loopback interfaces being advertised by RIPv2.R1#show ip interface brief | include up|IPInterface IP-Address OK? Method Status ProtocolGigabitEthernet0/1 10.0.0.1 YES TFTP up upLoopback0 192.168.1.1 YES TFTP up upLoopback1 192.168.2.1 YES TFTP up upLoopback2 192.168.2.129 YES TFTP up upLoopback3 10.0.10.1 YES TFTP up upLoopback4 10.4.0.1 YES TFTP up upNext, let’s confirm that RIPv2 is automatically performing network summarization, as well as advertising all desired networks.R1#show ip protocols | begin ripRouting Protocol is &quot;rip&quot; Outgoing update filter list for all interfaces is not set Incoming update filter list for all interfaces is not set Sending updates every 30 seconds, next due in 26 seconds Invalid after 180 seconds, hold down 180, flushed after 240 Redistributing: rip Default version control: send version 2, receive version 2 Interface Send Recv Triggered RIP Key-chain GigabitEthernet0/1 2 2 No none Automatic network summarization is in effect &amp;lt;&amp;lt;&amp;lt; Maximum path: 4 Routing for Networks: 10.0.0.0 &amp;lt;&amp;lt;&amp;lt; 192.168.1.0 &amp;lt;&amp;lt;&amp;lt; 192.168.2.0 &amp;lt;&amp;lt;&amp;lt; Passive Interface(s): Loopback0 Loopback1 Loopback2 Loopback3 Loopback4 Routing Information Sources: Gateway Distance Last Update Distance: (default is 120)If we activate debugs, we can see that RIPv2 is sending an update out of Gi0/1 containing a total of 4 routes.R1#debug ip rip eventsRIP event debugging is onR1#*Dec 27 13:39:10.666: RIP: sending v2 update to 224.0.0.9 via GigabitEthernet0/1 (10.0.0.1)*Dec 27 13:39:10.667: RIP: Update contains 4 routes*Dec 27 13:39:10.667: RIP: Update queued*Dec 27 13:39:10.668: RIP: Update sent via GigabitEthernet0/1R1#undebug allAll possible debugging has been turned offR1#R1 has a total of 6 up/up Layer 3 interfaces with unique subnets. Split Horizon is enabled by default on Ethernet interfaces, which will prevent the 10.0.0.0/30 network from being advertised out of Gi0/1. As a result, we expect 5 networks to be advertised by RIPv2, but only 4 are advertised instead. If you refer to the “Routing for Networks” section in the show ip protocols output above, RIPv2 reports it is routing 3 separate networks. These discrepancies can make understanding RIPv2’s behavior confusing.We can see which specific prefixes RIPv2 is advertising through debug ip rip:R1#debug ip ripRIP protocol debugging is onR1#*Dec 28 03:17:42.650: RIP: sending v2 update to 224.0.0.9 via GigabitEthernet0/1 (10.0.0.1)*Dec 28 03:17:42.651: RIP: build update entries*Dec 28 03:17:42.651: 10.0.10.0/23 via 0.0.0.0, metric 1, tag 0*Dec 28 03:17:42.651: 10.4.0.0/14 via 0.0.0.0, metric 1, tag 0*Dec 28 03:17:42.652: 192.168.1.0/24 via 0.0.0.0, metric 1, tag 0*Dec 28 03:17:42.652: 192.168.2.0/24 via 0.0.0.0, metric 1, tag 0R1#undebug allAll possible debugging has been turned offR1#A packet capture performed on R1’s Gi0/1 interface confirms that a total of four prefixes are present in the RIPv2 Update packet.R2’s RIPv2 database confirms the prefixes received by R1.R2#show ip rip database10.0.0.0/8 auto-summary10.0.0.0/30 directly connected, GigabitEthernet0/110.0.10.0/23 [1] via 10.0.0.1, 00:00:01, GigabitEthernet0/110.4.0.0/14 [1] via 10.0.0.1, 00:00:01, GigabitEthernet0/1192.168.1.0/24 auto-summary192.168.1.0/24 [1] via 10.0.0.1, 00:00:01, GigabitEthernet0/1192.168.2.0/24 auto-summary192.168.2.0/24 [1] via 10.0.0.1, 00:00:01, GigabitEthernet0/1A summary of the behavior imposed on all 6 of R1’s up/up Layer 3 interfaces can be found in the table below: Prefix Behavior 10.0.0.0/30 Not summarized, not advertised 192.168.1.0/24 Not summarized, advertised as-is 192.168.2.0/25 Summarized into 192.168.2.0/24, advertised 192.168.2.128/25 Summarized into 192.168.2.0/24, advertised 10.0.10.0/23 Not summarized, advertised as-is 10.4.0.0/14 Not summarized, advertised as-is We can confirm that RIPv2’s auto-summary feature is causing classless networks 192.168.2.0/25 and 192.168.2.128/25 to be summarized into a Class C 192.168.2.0/24 network by removing the default auto-summary configuration from the RIPv2 process on R1.R1#configure terminalEnter configuration commands, one per line. End with CNTL/Z.R1(config)#router ripR1(config-router)#no auto-summaryR1(config-router)#endR1#The output of show ip protocols confirms that RIPv2 is not performing automatic network summarization.R1#show ip protocols | include rip|summarizationRouting Protocol is &quot;rip&quot; Redistributing: rip Automatic network summarization is not in effect &amp;lt;&amp;lt;&amp;lt;Now, let’s reactivate RIPv2 debugs on R1 to see how many prefixes are being advertised.R1#debug ip ripRIP protocol debugging is onR1#*Dec 28 03:18:10.614: RIP: sending v2 update to 224.0.0.9 via GigabitEthernet0/1 (10.0.0.1)*Dec 28 03:18:10.615: RIP: build update entries*Dec 28 03:18:10.615: 10.0.10.0/23 via 0.0.0.0, metric 1, tag 0*Dec 28 03:18:10.615: 10.4.0.0/14 via 0.0.0.0, metric 1, tag 0*Dec 28 03:18:10.616: 192.168.1.0/24 via 0.0.0.0, metric 1, tag 0*Dec 28 03:18:10.616: 192.168.2.0/25 via 0.0.0.0, metric 1, tag 0*Dec 28 03:18:10.616: 192.168.2.128/25 via 0.0.0.0, metric 1, tag 0R1#undebug allAll possible debugging has been turned offWe see all 5 expected prefixes inserted in the RIPv2 update. Checking R2’s RIP database, we can also see all 5 prefixes present in the database.R2#show ip rip database10.0.0.0/8 auto-summary10.0.0.0/30 directly connected, GigabitEthernet0/110.0.10.0/23 [1] via 10.0.0.1, 00:00:07, GigabitEthernet0/110.4.0.0/14 [1] via 10.0.0.1, 00:00:07, GigabitEthernet0/1192.168.1.0/24 auto-summary192.168.1.0/24 [1] via 10.0.0.1, 00:00:07, GigabitEthernet0/1192.168.2.0/24 auto-summary192.168.2.0/25 [1] via 10.0.0.1, 00:00:07, GigabitEthernet0/1192.168.2.128/25 [1] via 10.0.0.1, 00:00:07, GigabitEthernet0/1Finally, let’s confirm that all 5 prefixes are present in R2’s routing table.R2#show ip route ripCodes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfRGateway of last resort is not set 10.0.0.0/8 is variably subnetted, 4 subnets, 4 masksR 10.0.10.0/23 [120/1] via 10.0.0.1, 00:00:23, GigabitEthernet0/1R 10.4.0.0/14 [120/1] via 10.0.0.1, 00:00:23, GigabitEthernet0/1R 192.168.1.0/24 [120/1] via 10.0.0.1, 00:00:23, GigabitEthernet0/1 192.168.2.0/25 is subnetted, 2 subnetsR 192.168.2.0 [120/1] via 10.0.0.1, 00:00:23, GigabitEthernet0/1R 192.168.2.128 [120/1] via 10.0.0.1, 00:00:23, GigabitEthernet0/1The best explanation for this behavior can be found in the “Configuring Routing Information Protocol” chapter of the IP Routing: RIP Configuration Guide for Cisco IOS Release 15M&amp;amp;T. Under the “RIP Route Summarization” heading, the guide states that automatic summarization happens “by summarizinig subprefixes to the classful network boundary when crossing classful network boundaries.” Furthermore, under the “Summarizing RIP Routes” heading, the guide states the following: “RIP Version 2 supports automatic route summarization by default. The software summarizes subprefixes to the classful network boundary when classful network boundaries are crossed. If you have disconnected subnets, disable automatic route summarization to advertise the subnets. When route summarization is disabled, the software sends subnet and host routing information across classful network boundaries.”To best understand this, we must first understand what a classful network boundary is. Classful networks are an addressing architecture introduced by RFC 791 Section 2.3. They are described as follows: “There are three formats or classes of internet addresses: in class a, the high order bit is zero, the next 7 bits are the network, and the last 24 bits are the local address; in class b, the high order two bits are one-zero, the next 14 bits are the network and the last 16 bits are the local address; in class c, the high order three bits are one-one-zero, the next 21 bits are the network and the last 8 bits are the local address.”RFC 790 provides additional details about the IP addresses included in each class. The resulting class address ranges are described by the table below. Note that this table includes reserved subnets, as RIPv2 does not discriminate between reserved addresses and unreserved addresses. In the “Binary Addressing” field, an N indicates a network bit (that is, the section of the binary address that is the “network” portion of the address) while an L indicates a local bit (that is, the section of the binary address that is the “local” portion of the address.) Class Name Binary Addressing Lowest Valid Subnet Highest Valid Subnet Class A 0NNNNNNN.LLLLLLLL.LLLLLLLL.LLLLLLLL 1.0.0.0/8 127.0.0.0/8 Class B 10NNNNNN.NNNNNNNN.LLLLLLLL.LLLLLLLL 128.0.0.0/16 191.255.0.0/16 Class C 110NNNNN.NNNNNNNN.NNNNNNNN.LLLLLLLL 192.0.0.0/24 223.255.255.0/24 Individual organizations (such as businesses, universities, etc.) were originally assigned classful networks to use. However, individual organizations often connected to and required networking between each other. Since classful boundaries were typically cleanly split between organizations, RIPv2’s automatic summarization feature assisted with reducing the size of routing tables and RIPv2 update packet sizes with minimal effort needed on the part of the network administrators. This was especially important during the early ages of the Internet, as the processing and memory capabilities of routers were much scarcer than they are today.To accomplish this, rules needed to be implemented in software to have this feature work intelligently. The Cisco IOS implementation of RIPv2’s automatic route summarization is essentially as follows: If RIPv2 has multiple subprefixes within a classful boundary in the RIP database and needs to send an update message out of an interface owning a subprefix within the same classful boundary, then RIPv2 will not perform automatic network summarization. In our example, R1 has 10.4.0.0/14 and 10.0.10.0/23 present in the RIP database. It needs to send an update out of Gi0/1, which has an IP address of 10.0.0.1 in the 10.0.0.0/30 network. All three of these networks are subprefixes of the Class A 10.0.0.0/8 network. Since RIPv2 needs to send an update out of Gi0/1 (10.0.0.1), R1 will not automatically summarize 10.4.0.0/14 and 10.0.10.0/23 to 10.0.0.0/8. If RIPv2 has multiple subprefixes within a classful boundary in the RIP database and needs to send an update message out of an interface that has an IP address within a different classful boundary, then RIPv2 will perform automatic network summarization. For example, let’s say a new interface Gi0/2 is created. This interface has an IP address of 11.0.0.1/30, connects to a third router, and is activated in the RIP process with network 11.0.0.0 configuration. RIPv2 will automatically summarize 10.4.0.0/14, 10.0.10.0/23, and 10.0.0.0/30 into a single 10.0.0.0/8 classful prefix that is advertised out the Gi0/2 interface towards the third router. RIPv2’s automatic summarization feature is often misunderstood - I hope that this helped you understand it better!References “Configuring Routing Information Protocol” chapter of the IP Routing: RIP Configuration Guide for Cisco IOS Release 15M&amp;amp;T RFC 2453 - RIP Version 2 RFC 791 - Internet Protocol RFC 790 - Assigned Numbers" }, { "title": "Deep Dive - IEEE 802.1D Spanning Tree Topology Change", "url": "/Deep-Dive-Spanning-Tree-Topology-Change/", "categories": "", "tags": "", "date": "2019-12-14 00:00:00 -0500", "snippet": "While reviewing the IEEE 802.1D Spanning Tree Protocol Topology Change Notification mechanism, I felt some confusion as to the exact behavior that each bridge exhibits when a topology change occurs. This post documents my journey to alleviate this confusion in the lab!ScopeDuring my CCIE studies, I understood that there were two types of BPDUs - a Configuration BPDU and a Topology Change Notification BPDU. However, I was unclear which bridges create which BPDU in a topology change scenario. Specifically, I wanted to clarify the following points: When a topology change occurs on a non-root bridge (such as in the event of a link flap), what type of BPDU does that bridge create? When an intermediate bridge receives a topology change notification from a downstream bridge, what type of BPDU is sent towards the root bridge, and what type of BPDU is sent towards the downstream bridge? When a topology change occurs in a spanning tree, what type of BPDU do bridges not in the path of the topology change notification receive? To answer these questions, I decided to test in the lab!TopologyBridge ID and IP address information is as follows: Node Name Bridge ID IP Address Root 5e00.0000.0000 192.168.1.1 S1-1 5e00.0001.0000 192.168.1.100 S2-1 5e00.0002.0000 192.168.1.103 S1-2 5e00.0003.0000 192.168.1.101 S1-3 5e00.0004.0000 192.168.1.102 S2-2 5e00.0005.0000 192.168.1.104 S2-3 5e00.0006.0000 192.168.1.105 H1-1 N/A 192.168.1.10 H1-2 N/A 192.168.1.20 H2-1 N/A 192.168.1.30 H2-2 N/A 192.168.1.40 Lab MaterialsThis lab was completed with a VIRL 1.6.65 server using the following nodes: Node Name Operating System Version IOSv IOS 15.7(3)M3 IOSvL2 IOS 15.2 Default ConfigurationBy default, all nodes were configured with their hostname, as well as the following configuration:no ip domain-lookupservice timestamps debug datetime msecservice timestamps log datetime mseclogging buffered 10000000interface GigabitEthernet0/0 shutdownline console 0 exec-timeout 0 0 logging synchronousAfter all nodes came online, their clock was manually set to the same time with the clock set global EXEC command. However, the time of the clocks drifted during the lab, so not all debug or log timestamps are synchronized across devices.LabWe will attempt to answer our questions with the above topology through a link flap on S1-2’s Gi0/2 interface towards H1-1 while relevant debugs are running on S1-2, S1-1, Root, and S2-1.First, let’s configure the switch named “Root” as the root bridge for VLAN 1. By default, it should already be the root bridge as a result of its bridge ID, but we will manually configure its priority anyway.Root#configure terminalEnter configuration commands, one per line. End with CNTL/Z.Root(config)#spanning-tree vlan 1 root primaryRoot(config)#endRoot#show spanning-tree vlan 1VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 24577 Address 5e00.0000.0000 This bridge is the root Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 24577 (priority 24576 sys-id-ext 1) Address 5e00.0000.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 300 secInterface Role Sts Cost Prio.Nbr Type------------------- ---- --- --------- -------- --------------------------------Gi0/1 Desg FWD 4 128.2 P2p Gi0/2 Desg FWD 4 128.3 P2p Next, let’s review the debugs we need to enable. On S1-2, Root, and S2-1, we will want to see Spanning Tree topology events as well as BPDUs that are sent and received.Root#debug spanning-tree ? all All Spanning Tree debugging messages bpdu Spanning tree BPDU &amp;lt;&amp;lt;&amp;lt; bpdu-opt Optimized BPDU handling config Spanning tree config changes &amp;lt;&amp;lt;&amp;lt; etherchannel EtherChannel support events Spanning tree topology events exceptions Spanning tree exceptions general Spanning tree general mstp MSTP debug commands pvst+ PVST+ events root Spanning tree root events snmp Spanning Tree SNMP handling switch Switch Shim debug commands synchronization STP state sync eventsRoot#debug spanning-tree eventsSpanning Tree event debugging is onRoot#debug spanning-tree bpduRoot#S1-1#debug spanning-tree eventsSpanning Tree event debugging is onS1-1#debug spanning-tree bpduS1-1#S1-2#debug spanning-tree eventsSpanning Tree event debugging is onS1-2#debug spanning-tree bpdu S1-2#S2-1#debug spanning-tree eventsSpanning Tree event debugging is onS2-1#debug spanning-tree bpdu S2-1#Now, let’s shut down S1-2’s Gi0/2, causing a topology change.S1-2#configure terminalS1-2(config)#interface GigabitEthernet0/2S1-2(config-if)#shutdownS1-2(config-if)#endAfter waiting for the topology to stabilize, let’s shut off the debugs on each device.Root#undebug allAll possible debugging has been turned offS1-1#undebug allAll possible debugging has been turned offS1-2#undebug allAll possible debugging has been turned offS2-1#undebug allAll possible debugging has been turned offNow, let’s review the debugs sent to S1-2’s logfile. Note that the “Dec.14.14:38:27” regular expression only shows us debugs that occurred immediately after the Gi0/2 interface was shutdown.S1-2#show logging | begin Dec.14.14:38:27 &amp;lt;snip&amp;gt;1 | Dec 14 14:38:27.613: STP: VLAN0001 rx BPDU: config protocol = ieee, packet from GigabitEthernet0/1 , linktype IEEE_SPANNING , enctype 2, encsize 17 &amp;lt;&amp;lt;&amp;lt;-|2 | Dec 14 14:38:27.614: STP: enc 01 80 C2 00 00 00 FA 16 3E D2 06 2C 00 26 42 42 03 &amp;lt;&amp;lt;&amp;lt; |3 | Dec 14 14:38:27.621: STP: Data 000000000060015E00000000000000000480015E000001000080030100140002000F00 &amp;lt;&amp;lt;&amp;lt; |- 1.4 | Dec 14 14:38:27.634: STP: VLAN0001 Gi0/1:0000 00 00 00 60015E0000000000 00000004 80015E0000010000 8003 0100 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt; |5 | Dec 14 14:38:27.648: STP(1) port Gi0/1 supersedes 0 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:27.649: STP: VLAN0001 Gi0/2 tx BPDU: config protocol=ieee &amp;lt;&amp;lt;&amp;lt;-|- 2.2 | Data : 0000 00 00 00 60015E0000000000 00000008 80015E0000030000 8003 0200 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:28.683: STP: VLAN0001 Gi0/1 tx BPDU: tcn: 0000 00 80 &amp;lt;&amp;lt;&amp;lt;-|- 3.1 | Dec 14 14:38:28.685: STP: VLAN0001 sent Topology Change Notice on Gi0/1 &amp;lt;&amp;lt;&amp;lt;-|- 4.2 | Dec 14 14:38:28.685: STP[1]: Generating TC trap for port GigabitEthernet0/2 &amp;lt;&amp;lt;&amp;lt;-|The debugs show that four separate events occurred on S1-2. I visually segregated these events to make it easier to visualize. To the right of each debug is each logical event. To the left of each debug is an individual line number that I will refer to for more detail.The four events are: S1-2 receives a Configuration BPDU on Gi0/1 originated by the root bridge (Root) and passed on by S1-1. This makes sense, as Gi0/1 is our root port. The debug in line 4 shows us the contents of this Configuration BPDU and logically separates it into each section of the BPDU to make it easier to read (unlike line 3, which lumps everything together). The fourth section in line 4 is the “BPDU Flags” section, which is a 2-byte field containing the Topology Change Acknowledgment flag and the Topology Change flag. Since both of these values are set to zero, this tells us that this Configuration BPDU was originated before the topology change (that is, the flapping of Gi0/2) occurred. As such, for our purposes, we can ignore it. S1-2 generates a Configuration BPDU on Gi0/2 (the interface that was just administratively shut down). At first, this might not make sense (after all, why would Spanning Tree attempt to send a Configuration BPDU out of an interface that is down?) However, since the Spanning Tree process on S1-2 has not yet sent a Topology Change Notification BPDU towards the root bridge, the Spanning Tree process is most likely not yet aware that the Gi0/2 interface is down at the moment. As a result, Spanning Tree would likely hand the Configuration BPDU generated in this debug to the data plane, which would subsequently drop it since it cannot forward a frame out of an interface that is down. About a second later, S1-2 generates a Topology Change Notification BPDU out of Gi0/1. This indicates that the Spanning Tree process is now aware that Gi0/2 is down, and that a topology change has occurred. Just like the debug on the fourth line of the first event, this debug logically separates each part of the BPDU to make it easier to read. In this debug, the third section is set to 0x80. This indicates that this is a Topology Change Notification BPDU. This stands in contrast to the 0x00 value seen in line four of the first event, which indicates the BPDU is a Configuration BPDU. Finally, the Spanning Tree process reports that it has sent a Topology Change Notification (in this case, the debug calls it a “Notice”) out of the root port, Gi0/1. The screenshot below shows the exact Topology Change Notification BPDU generated by S1-2 that is sent out of the Gi0/1 interface from a Wireshark perspective.Next, we must search through S1-1’s debugs to find when it receives this Topology Change Notification BPDU, as well as what it does with it.S1-1#show logging | begin Dec.14.14:38&amp;lt;snip&amp;gt;1 | Dec 14 14:38:12.185: STP: VLAN0001 rx BPDU: config protocol = ieee, packet from GigabitEthernet0/2 , linktype IEEE_SPANNING , enctype 2, encsize 17 &amp;lt;&amp;lt;&amp;lt;-|2 | Dec 14 14:38:12.187: STP: enc 01 80 C2 00 00 00 FA 16 3E E8 6D CD 00 07 42 42 03 &amp;lt;&amp;lt;&amp;lt; |3 | Dec 14 14:38:12.193: STP: Data 00000080 &amp;lt;&amp;lt;&amp;lt; |- 1.4 | Dec 14 14:38:12.194: STP: VLAN0001 Gi0/2:0000 00 80 &amp;lt;&amp;lt;&amp;lt; |5 | Dec 14 14:38:12.196: STP: VLAN0001 Topology Change rcvd on Gi0/2 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:12.198: STP: VLAN0001 Gi0/1 tx BPDU: tcn: 0000 00 80 &amp;lt;&amp;lt;&amp;lt;-|- 2.2 | Dec 14 14:38:12.200: STP: VLAN0001 sent Topology Change Notice on Gi0/1 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:12.201: STP: VLAN0001 Gi0/2 tx BPDU: config protocol=ieee &amp;lt;&amp;lt;&amp;lt;-|- 3.2 | Data : 0000 00 00 80 60015E0000000000 00000004 80015E0000010000 8003 0200 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt;-|These debugs show three separate events that occurred on S1-1: S1-1 receives the Topology Change Notification BPDU from Gi0/2, as shown by line 1. You can tell that this is the Topology Change Notification BPDU sent by S1-2 because of the 0x80 value in the third field of the BPDU shown in line 4. S1-1 recognizes this as a Topology Change Notification BPDU and logs it as such in line 5. Before doing anything else, S1-1 creates a new Topology Change Notification BPDU and sends it out of Gi0/1 (the bridge’s root port) towards Root. Line 1 shows the contents of this BPDU. Finally, S1-1 sends a Configuration BPDU out of Gi0/2 towards S1-2 with a value of 0x80 in the fourth field, as shown by line 2. If you convert 0x80 to binary, you get 1000 0000. The most significant bit of the BPDU Flags field is the “Topology Change Acknowledgment” bit. As such, this Configuration BPDU is informing the downstream bridge (S1-2) that the Topology Change Notification BPDU has been received. If S1-2 did not receive this BPDU, S1-2 would continue sending Topology Change Notification BPDUs at the expiration of each Hello timer (that is, every 2 seconds by default). Take a second to think about why S1-1 chooses to send a Topology Change Notification BPDU to the root bridge before sending an acknowledgment to S1-2 that S1-2’s Topology Change Notification BPDU was received. From a protocol philosophy perspective, this makes perfect sense. If you were designing a hierarchical protocol that needs to rapidly react to a topology change, and you made the decision that the head of the hierarchy (in this case, the root bridge) is responsible for propagating information about the topology change, you would want hierarchy members (bridges) to inform the hierarchy head (root bridge) about the change as rapidly as possible so that the rest of the hierarchy can react to the topology change. Therefore, when an intermediate bridge receives the news that a topology change has occurred from a downstream bridge, the bridge should prioritize passing along the news towards the root bridge over acknowledging receipt of the news.The screenshot below shows the Configuration BPDU with the “Topology Change Acknowledgment” flag set that is sent from S1-1 to S1-2 from a Wireshark perspective.Now, let’s review Root’s debugs to find when it receives the Topology Change Notification BPDU originated by S1-1.Root#show logging | begin Dec.14.14:38&amp;lt;snip&amp;gt;1 | Dec 14 14:38:34.702: STP: VLAN0001 rx BPDU: config protocol = ieee, packet from GigabitEthernet0/1 , linktype IEEE_SPANNING , enctype 2, encsize 17 &amp;lt;&amp;lt;&amp;lt;-|2 | Dec 14 14:38:34.703: STP: enc 01 80 C2 00 00 00 FA 16 3E DD 98 A1 00 07 42 42 03 &amp;lt;&amp;lt;&amp;lt; |- 1.3 | Dec 14 14:38:34.711: STP: VLAN0001 Gi0/1:0000 00 80 &amp;lt;&amp;lt;&amp;lt; |4 | Dec 14 14:38:34.713: STP: VLAN0001 Topology Change rcvd on Gi0/1 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:34.715: STP: VLAN0001 Gi0/1 tx BPDU: config protocol=ieee &amp;lt;&amp;lt;&amp;lt;-|- 2.2 | Data : 0000 00 00 81 60015E0000000000 00000000 60015E0000000000 8002 0000 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:35.622: STP: VLAN0001 Gi0/2 tx BPDU: config protocol=ieee &amp;lt;&amp;lt;&amp;lt;-|- 3.2 | Data : 0000 00 00 01 60015E0000000000 00000000 60015E0000000000 8003 0000 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt;-|These debugs show three separate events that occurred on Root: Root receives the Topology Change Notification BPDU from Gi0/1, as shown by line 1. You can tell that this is the Topology Change Notification BPDU sent by S1-1 because of the 0x80 value in the third field of the BPDU shown in line 3. Root recognizes this as a Topology Change Notification BPDU and logs it as such in line 4. Root sends a Configuration BPDU out of Gi0/1 with the Topology Change Acknowledgment and Topology Change bits set in the BPDU Flags field. As shown in line 2, the fourth section of the BPDU has a value of 0x81. If you convert 0x81 to binary, you get 1000 0001. The most significant bit of the BPDU Flags field is the “Topology Change Acknowledgment” bit, while the least significant bit of the BPDU Flags field is the “Topology Change” bit. Root is sending a Configuration BPDU to S1-2 acknowledging that it received S1-2’s Topology Change Notification BPDU, as well as informing it that there was a change in the topology of the spanning tree. Root sends a Configuration BPDU out of Gi0/2 with the Topology Change bit set in the BPDU Flags field. As shown in line 2, the fourth section of the BPDU has a value of 0x01. If you convert 0x01 to binary, you get 0000 0001. The least significant bit of the BPDU Flags field is the “Topology Change” bit. Root is sending a Configuration BPDU towards S2-1 stating that there was a change in the topology of this spanning tree. The screenshot below shows the Configuration BPDU with the “Topology Change Acknowledgment” and “Topology Change” bits set sent from Root to S1-1 from a Wireshark perspective.If we take a look at S1-1 once more, we see debugs with three different events. The first event indicates that S1-1 received the Configuration BPDU from Root on Gi0/1 with the “Topology Change Acknowledgment” and “Topology Change” bits set. The second and third events indicate that S1-1 sends Configuration BPDUs out of Gi0/2 (towards S1-2) and Gi0/3 (towards S1-3) with the “Topology Change” bit set.1 | Dec 14 14:38:12.215: STP: VLAN0001 rx BPDU: config protocol = ieee, packet from GigabitEthernet0/1 , linktype IEEE_SPANNING , enctype 2, encsize 17 &amp;lt;&amp;lt;&amp;lt;-|2 | Dec 14 14:38:12.216: STP: enc 01 80 C2 00 00 00 FA 16 3E C3 32 11 00 26 42 42 03 &amp;lt;&amp;lt;&amp;lt; |3 | Dec 14 14:38:12.222: STP: Data 000000008160015E00000000000000000060015E000000000080020000140002000F00 &amp;lt;&amp;lt;&amp;lt; |- 1.4 | Dec 14 14:38:12.231: STP: VLAN0001 Gi0/1:0000 00 00 81 60015E0000000000 00000000 60015E0000000000 8002 0000 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt; |5 | Dec 14 14:38:12.240: STP(1) port Gi0/1 supersedes 0 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:12.242: STP: VLAN0001 Gi0/3 tx BPDU: config protocol=ieee &amp;lt;&amp;lt;&amp;lt;-|- 2.2 | Data : 0000 00 00 01 60015E0000000000 00000004 80015E0000010000 8004 0100 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:13.219: STP: VLAN0001 Gi0/2 tx BPDU: config protocol=ieee &amp;lt;&amp;lt;&amp;lt;-|- 3.2 | Data : 0000 00 00 01 60015E0000000000 00000004 80015E0000010000 8003 0100 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt;-|Debugs from S2-1 indicate that S2-1 also receives a Configuration BPDU from Root - however, only the “Topology Change” bit is set.S2-1#show logging | beg Dec.14.14:38:28&amp;lt;snip&amp;gt;1 | Dec 14 14:38:28.547: STP: VLAN0001 rx BPDU: config protocol = ieee, packet from GigabitEthernet0/1 , linktype IEEE_SPANNING , enctype 2, encsize 17 &amp;lt;&amp;lt;&amp;lt;-|2 | Dec 14 14:38:28.548: STP: enc 01 80 C2 00 00 00 FA 16 3E 12 11 90 00 26 42 42 03 &amp;lt;&amp;lt;&amp;lt; |3 | Dec 14 14:38:28.555: STP: Data 000000000160015E00000000000000000060015E000000000080030000140002000F00 &amp;lt;&amp;lt;&amp;lt; |- 1.4 | Dec 14 14:38:28.567: STP: VLAN0001 Gi0/1:0000 00 00 01 60015E0000000000 00000000 60015E0000000000 8003 0000 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt; |5 | Dec 14 14:38:28.579: STP(1) port Gi0/1 supersedes 0 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:28.581: STP: VLAN0001 Gi0/2 tx BPDU: config protocol=ieee &amp;lt;&amp;lt;&amp;lt;-|- 2.2 | Data : 0000 00 00 01 60015E0000000000 00000004 80015E0000020000 8003 0100 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt;-|1 | Dec 14 14:38:28.592: STP: VLAN0001 Gi0/3 tx BPDU: config protocol=ieee &amp;lt;&amp;lt;&amp;lt;-|- 3.2 | Data : 0000 00 00 01 60015E0000000000 00000004 80015E0000020000 8004 0100 1400 0200 0F00 &amp;lt;&amp;lt;&amp;lt;-|The screenshot below shows the Configuration BPDU with only the “Topology Change” bit set sent from Root to S2-1 from a Wireshark perspective.Let’s turn back to Root’s debugs to confirm how long Root will send Configuration BPDUs with the “Topology Change” bit set. The previous debugs from Root show that the first Configuration BPDUs were sent at 14:38:34.715. The below debugs show that the last debug with the “Topology Change” bit set is sent at 14:39:08.120. This shows that Root indicated a topology change was underway for about 34 seconds. This roughly equates to the sum of the Maximum Age timer (20 seconds) and the Forwarding Delay timer (15 seconds), which is expected behavior as documented in Cisco’s “Understanding Spanning-Tree Protocol Topology Changes” Troubleshooting TechNote.Dec 14 14:39:08.105: STP: VLAN0001 Gi0/1 tx BPDU: config protocol=ieee Data : 0000 00 00 01 60015E0000000000 00000000 60015E0000000000 8002 0000 1400 0200 0F00Dec 14 14:39:08.120: STP: VLAN0001 Gi0/2 tx BPDU: config protocol=ieee Data : 0000 00 00 01 60015E0000000000 00000000 60015E0000000000 8003 0000 1400 0200 0F00Dec 14 14:39:10.135: STP: VLAN0001 Gi0/1 tx BPDU: config protocol=ieee Data : 0000 00 00 00 60015E0000000000 00000000 60015E0000000000 8002 0000 1400 0200 0F00Dec 14 14:39:10.151: STP: VLAN0001 Gi0/2 tx BPDU: config protocol=ieee Data : 0000 00 00 00 60015E0000000000 00000000 60015E0000000000 8003 0000 1400 0200 0F00ConclusionIn summary, we were able to determine the answers to our questions by invoking a topology change in an environment with debugs enabled. The answers to our questions are as follows: When a topology change occurs on a non-root bridge, that bridge will create a Topology Change Notification BPDU and sent it out of the bridge’s Root Port towards the root bridge. When an intermediate non-root bridge receives a Topology Change Notification BPDU from a downstream bridge, the intermediate bridge will relay the Topology Change Notification BPDU out of its respect Root Port to expedite the topology change process as a whole. Once that task is complete, the intermediate bridge will send a Configuration BPDU towards the downstream bridge that originated the Topology Change Notification BPDU with the “Topology Change Acknowledgment” bit sent to prevent further Topology Change Notification BPDUs from being created. Bridges that are not in the path of the Topology Change Notification BPDU will eventually receive a Configuration BPDU originated by the root bridge with the “Topology Change” bit set. Upon receiving this BPDU, the bridge will rapidly age out MAC addresses by setting the age of each MAC address to the Forwarding Delay timer (15 seconds). References “Understanding Spanning-Tree Protocol Topology Changes” Troubleshooting TechNote Chapter 3 (“Spanning Tree Protocol”) of the CCIE Routing and Switching v5.0 Official Cert Guide, Volume 1, Fifth Edition “Configuring STP” chapter of the Catalyst 3750 Switch Software Configuration Guide, Cisco IOS Release 16.0(2)SE and LaterI hope that this helps you understand the IEEE 802.1D Spanning Tree Protocol topology change mechanism slightly better!" }, { "title": "Quick Mystery - Spanning Tree Priority", "url": "/Quick-Mystery-Spanning-Tree-Priority/", "categories": "", "tags": "", "date": "2019-11-29 00:00:00 -0500", "snippet": "One aspect of Spanning Tree Protocol I became curious about during my CCIE studies was the exact behavior behind how Spanning Tree bridge priorities are modified using the spanning-tree vlan {vlan-id} root {primary | secondary} configuration command. This post explores this behavior in the lab!MysteryIn this post, we seek to answer two questions: If a bridge is configured to automatically become the root of the Spanning Tree with the spanning-tree vlan {vlan-id} root primary configuration command, will it preempt itself as the root if another bridge’s priority suddenly becomes lower and challenges the root bridge? What is the exact behavior behind the spanning-tree vlan {vlan-id} root {primary | secondary} configuration command? TopologyTesting was performed through VIRL 1.6.0 using IOSvL2 nodes running IOS 15.2.TestingFirst, let’s check the current Spanning Tree state in VLAN 1 on S1. By default, S1 is the root bridge because it holds the lowest bridge address in the L2 domain.S1#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 32769 Address 5e00.0000.0000 This bridge is the root &amp;lt;&amp;lt;&amp;lt; Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 32769 (priority 32768 sys-id-ext 1) Address 5e00.0000.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 300 secS1 is configured to automatically become the root of the L2 domain in VLAN 1 through the spanning-tree vlan 1 root primary configuration command.S1#configure terminalEnter configuration commands, one per line. End with CNTL/Z.S1(config)#spanning-tree vlan 1 root primaryS1(config)#endLet’s review the configuration that is actually applied.S1#show run | i spaspanning-tree mode pvstspanning-tree extend system-idspanning-tree vlan 1 priority 24576 &amp;lt;&amp;lt;&amp;lt;Let’s verify that the bridge priority of S1 has changed accordingly.S1#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 24577 &amp;lt;&amp;lt;&amp;lt; Address 5e00.0000.0000 This bridge is the root Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 24577 (priority 24576 sys-id-ext 1) Address 5e00.0000.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 300 secFor future reference, note that the priority of 24,576 that was applied is 8192 less than the default bridge priority value of 32,768. Next, let’s configure S2 with a bridge priority of 16,384.S2#configure terminalEnter configuration commands, one per line. End with CNTL/Z.S2(config)#spanning-tree vlan 1 priority 16384S2(config)#endS2 confirms that it is now the root bridge.S2#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 16385 &amp;lt;&amp;lt;&amp;lt; Address 5e00.0001.0000 This bridge is the root &amp;lt;&amp;lt;&amp;lt; Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 16385 (priority 16384 sys-id-ext 1) Address 5e00.0001.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 15 secThis suggests that S1 does not preempt itself as the root bridge when configured with spanning-tree vlan {vlan-id} root primary. We can confirm this by checking the Spanning Tree state and configuration of S1.S1#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 16385 Address 5e00.0001.0000 &amp;lt;&amp;lt;&amp;lt; Cost 4 Port 2 (GigabitEthernet0/1) Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 24577 (priority 24576 sys-id-ext 1) &amp;lt;&amp;lt;&amp;lt; Address 5e00.0000.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 15 secS1#sh run | i spaspanning-tree mode pvstspanning-tree extend system-idspanning-tree vlan 1 priority 24576 &amp;lt;&amp;lt;&amp;lt;The results of this test answer our first question. A switch configured with spanning-tree vlan {vlan-id} root primary will not preempt the root bridge role if another bridge with a superior BPDU usurps the role. Instead, this configuration command is essentially a macro that causes the local switch to analyze the current root bridge’s ID, determine what bridge priority configuration needs to be applied to become the root bridge, and apply the resulting configuration. This macro only runs when the spanning-tree vlan {vlan-id} root primary command is executed, so it is not able to preempt the root bridge role.Now, let’s try a second scenario. What happens if we configure spanning-tree vlan 1 root primary once more on S1?S1#configure terminalEnter configuration commands, one per line. End with CNTL/Z.S1(config)#spanning-tree vlan 1 root primary S1(config)#endS1#show run | i spaspanning-tree mode pvstspanning-tree extend system-idspanning-tree vlan 1 priority 16384S1#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 16385 Address 5e00.0000.0000 This bridge is the root Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 16385 (priority 16384 sys-id-ext 1) Address 5e00.0000.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 15 secS1 analyzed the current root bridge’s ID and found that it could become the root bridge if it lowered its priority to match that of the existing root bridge (S2) because its system MAC address (5e00.0000.0000) is lower than S2’s (5e00.0001.0000).At first glance, this behavior seems contrary to what is stated in Cisco’s documentation. The “Configuring STP” chapter of the Catalyst 3750 Switch Software Configuration Guide for IOS 15.0(2)SE and Later states the following: “To configure a switch to become the root for the specified VLAN, use the spanning-tree vlan vlan-id root global configuration command to modify the switch priority from the default value (32768) to a significantly lower value. When you enter this command, the software checks the switch priority of the root switches for each VLAN. Because of the extended system ID support, the switch sets its own priority for the specified VLAN to 24576 if this value will cause this switch to become the root for the specified VLAN. If any root switch for the specified VLAN has a switch priority lower than 24576, the switch sets its own priority for the specified VLAN to 4096 less than the lowest switch priority.”The first paragraph describes the behavior we initially observed when we configured spanning-tree vlan 1 root primary on S1 for the first time. In that scenario, the bridge priority of all bridges was set to 32,768, so S1 set its bridge priority to 24,576 as described by the documentation.However, the second paragraph describes behavior that S1 did not abide by in the second scenario. In the second scenario, the existing root bridge’s priority was 16,384. According to the documentation, S1 should have set its bridge priority to 12,288. Instead, S1 knew that its system MAC address was low enough to become the root bridge if it matched S2’s bridge priority, so it modified its configuration accordingly.Let’s try a third scenario involving S4, which has a system MAC address of 5e00.0003.0000. In this scenario, all bridges started with a bridge priority of 32,768. S1 was configured with spanning-tree vlan 1 root primary, applying a configuration of spanning-tree vlan 1 priority 24576 to the device.S1#show run | i spaspanning-tree mode pvstspanning-tree extend system-idspanning-tree vlan 1 priority 24576 &amp;lt;&amp;lt;&amp;lt;S1#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 24577 &amp;lt;&amp;lt;&amp;lt; Address 5e00.0000.0000 This bridge is the root &amp;lt;&amp;lt;&amp;lt; Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 24577 (priority 24576 sys-id-ext 1) Address 5e00.0000.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 15 secS4 agrees that S1 is currently the root bridge.S4#sh spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 24577 &amp;lt;&amp;lt;&amp;lt; Address 5e00.0000.0000 &amp;lt;&amp;lt;&amp;lt; Cost 4 Port 6 (GigabitEthernet1/1) Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 32769 (priority 32768 sys-id-ext 1) Address 5e00.0003.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 15 secLet’s configure S4 with the spanning-tree vlan 1 root primary configuration command and see what configuration is applied.S4#configure terminalEnter configuration commands, one per line. End with CNTL/Z.S4(config)#spanning-tree vlan 1 root primary S4(config)#endS4#sh run | i spaspanning-tree mode pvstspanning-tree extend system-idspanning-tree vlan 1 priority 20480Finally, let’s confirm that S4 now views itself as the root bridge.S4#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 20481 Address 5e00.0003.0000 This bridge is the root Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 20481 (priority 20480 sys-id-ext 1) Address 5e00.0003.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 300 secHere, S4 recognized that if it matched S1’s bridge priority of 24,576, it would still lose the root bridge election because S1’s system MAC address is lower (and, therefore, superior) to S4’s own system MAC address. In order to honor the administrator’s intent of making S4 the root bridge, S4 lowered its own bridge priority by 4096 to 20,480 as described by the documentation mentioned above.Finally, let’s give S3 some attention by configuring it as a secondary root bridge with the spanning-tree vlan 1 root secondary configuration command. First, let’s verify S3’s current perspective on the VLAN 1 spanning tree.S3#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 20481 Address 5e00.0003.0000 Cost 4 Port 2 (GigabitEthernet0/1) Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 32769 (priority 32768 sys-id-ext 1) Address 5e00.0002.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 300 secRecall that while there can only be a single root bridge in an L2 domain, the administrator can configure multiple bridges as “secondaries” to act as backup root bridges. Bridges configured with the spanning-tree vlan {vlan-id} root secondary configuration command will be more likely (but not guaranteed, as our scenario will show) to become the root bridge in the event that the primary root bridge fails.Let’s configure S3 with the spanning-tree vlan {vlan-id} root secondary command and see what configuration is applied.S3#configure terminalEnter configuration commands, one per line. End with CNTL/Z.S3(config)#spanning-tree vlan 1 root secondaryS3(config)#endS3#show run | i spaspanning-tree mode pvstspanning-tree extend system-idspanning-tree vlan 1 priority 28672 &amp;lt;&amp;lt;&amp;lt;As you can see, S3 modified its configuration such that its bridge priority is 28,672. This behavior is documented in the “Configuring STP” chapter of the Catalyst 3750 Switch Software Configuration Guide for IOS 15.0(2)SE and Later: “When you configure a switch as the secondary root, the switch priority is modified from the default value (32768) to 28672. The switch is then likely to become the root switch for the specified VLAN if the primary root switch fails. This is assuming that the other network switches use the default switch priority of 32768 and therefore are unlikely to become the root switch.”However, in the event that the root bridge (S4) fails, S3 will not become the root bridge, because S1 still has a lower priority.S1#show spanning-tree vlan 1&amp;lt;snip&amp;gt;VLAN0001 Spanning tree enabled protocol ieee Root ID Priority 20481 Address 5e00.0003.0000 Cost 4 Port 6 (GigabitEthernet1/1) Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Bridge ID Priority 24577 (priority 24576 sys-id-ext 1) &amp;lt;&amp;lt;&amp;lt; Address 5e00.0000.0000 Hello Time 2 sec Max Age 20 sec Forward Delay 15 sec Aging Time 300 secAs mentioned before, the spanning-tree vlan {vlan-id} root secondary command simply makes a bridge more likely to become the root bridge in the event that the primary root bridge fails. However, it does not guarantee what specific place in the hierarchy the bridge holds.ResultsIn conclusion, we’ve demonstrated three things: A bridge configured as the primary root bridge through the spanning-tree vlan {vlan-id} root primary configuration command will not preempt the root bridge role if a bridge with a superior BPDU comes online and usurps the role. The spanning-tree vlan {vlan-id} root primary configuration command can guarantee that the local bridge will become the root bridge at the instantaneous moment that command is executed. However, because it lacks any preempt behavior, there is no guarantee that the local bridge will remain the root bridge in the future. The spanning-tree vlan {vlan-id} root secondary configuration command is only truly helpful if all other bridges (aside from the root bridge) are configured with a default bridge priority of 32,768. Otherwise, it may be best to manually configure a hierarchy of bridge priorities using the spanning-tree vlan {vlan-id} priority {priority-value} configuration command on your desired primary and secondary root bridges. I hope that you find this helpful!" }, { "title": "Bringing The Gap - Frame Relay", "url": "/Bridging-The-Gap-Frame-Relay/", "categories": "", "tags": "", "date": "2017-12-06 00:00:00 -0500", "snippet": "When the ICND1, ICND2, and CCNA R&amp;amp;S composite exams were updated to their latest versions on August 20th, 2016, Frame Relay technology was removed from the exam topics. However, network engineers who obtained their CCNA R&amp;amp;S certification using these new exams and want to pursue their CCNP R&amp;amp;S certification will find that Frame Relay is still in the exam topics under the CCNP ROUTE exam, as well as lingering in the CCIE R&amp;amp;S exam as well! This can make learning an otherwise-legacy technology extremely difficult, especially as there are fewer and fewer real-world examples to draw from.Fear not! Today we’ll take a deep dive into Frame Relay. We’ll cover how it works, its purpose, what problems it solved, how it can be configured, and how routing protocols need to be configured in order to work over Frame Relay.Overview - The What &amp;amp; The WhyFrame Relay is a wide-area network, industry-standard data link layer protocol jointly created by a number of companies in the early 1990’s as a replacement for the X.25 WAN protocol. Frame Relay superseded X.25 thanks to its simplicity; it relinquished resource-intensive error correction algorithms in favor of the simpler CRC (cyclic redundancy check) algorithm, allowing for higher performance and greater efficiency. It also lacks explicit flow control procedures, which were made redundant when protocols further up the OSI model implemented similar technologies that were more accurate and efficient; Frame Relay opts for simpler congestion notifications, commonly known as FECN and BECN (which we will discuss later!)Frame Relay is also a packet-switched WAN technology, which means the service provider’s network is being utilized by multiple customers simultaneously. This lies in stark contrast to traditional circuit-switched WAN technologies such as a leased line, which is a true point-to-point connection between two sites that is not shared by any other customer. The advantage of a packet-switched WAN technology is cost; leased lines tend to be extremely expensive for both the service provider and the end customer. This is primarily because the service provider has to dedicate bandwidth within their infrastructure to you, while with packet-switched WAN technologies, the network is shared between multiple customers at the same time. Since the network is shared, this means that if a few customers are fully utilizing their connections to the service provider, the rest of the customers could potentially be affected through higher latency times or reduced available bandwidth.Another neat feature that Frame Relay utilizes (although it was not the first protocol to do so) is statistical multiplexing. Statistical multiplexing allows for multiple logical connections to be supported over a single physical connection; furthermore, each logical connection can have a specific amount of bandwidth allocated to it as necessary. For example, if I have a single 256Kbps link with logical connections to four remote sites, I can allocate 128Kbps to a single site, 64Kbps to a second site, and 32Kbps to each of the remaining two sites.In short, Frame Relay is a protocol that offered a cheaper and more efficient solution to connect remote sites together over a WAN, even over long distances.Frame Relay TerminologyTo begin our conversation on how Frame Relay works and how it can be configured, we need to define some terminology first!Frame Relay Data EquipmentLike other serial connections, each side of a physical Frame Relay link is one of two things: a DCE, or a DTE. DCE (Data Circuit-terminating Equipment) is a device typically owned by the Frame Relay service provider that sets the clock (or, in other words, the speed) of the link as well as connect to the rest of the service provider’s network. DCEs are typically Frame Relay packet switches. DTE (Data Terminal Equipment) are devices typically owned by the customer that accept the parameters (such as the clock speed) provided by the DCE. These devices can be computers, routers, bridges, and other such equipment. Virtual CircuitsThere are two different kinds of circuits that can be defined between Frame Relay devices depending on the type of network connection that is required by the customer. VCs (Switched Virtual Circuits) are temporary connections that are dynamically created when data needs to be transferred across the Frame Relay network, and automatically torn down when inactivity is detected. For some readers, this behavior should remind you of DMVPN Phase 2/3 spoke-to-spoke tunnels, which are also dynamically created and torn down as traffic necessitates! PVCs (Permanent Virtual Circuits) are permanent, predefined connections between remote sites.It is worth noting that SVCs are not a very popular service – most service providers will only sell PVCs between remote sites at a consistent monthly rate, as opposed to selling an SVC that can only be billed when it is used (which increases the amount of overhead the service provider has to maintain at scale.)Virtual circuits are differentiated from each other on a device through a unique identifier called a DLCI (Data-Link Connection Identifier, pronounced “dell-see”). The DLCI is locally significant, which means that the value of the DLCI only needs to be unique on each individual router. For some readers, this will sound similar to the OSPF process ID! In most cases, your service provider will tell you what DLCIs to use for each individual circuit.To demonstrate this, consider the topology below:In this example, we have the Austin router with two Frame Relay PVCs, one connected to Raleigh and another connected to Boston. On the Austin side, the ISP has assigned the Austin-Raleigh PVC a DLCI of 10, while the Austin-Boston PVC gets a DLCI of 20. From the ISP’s perspective, they might have multiple other customers that they’ve assigned a DLCI of 10 or 20 to – in fact, one of them is in our diagram! On the Boston side, the Austin-Boston PVC also has a DLCI of 20. However, so long as the ISP handles the switching and routing perspectives of the Frame Relay network (which we will briefly demonstrate later on), there will not be any connectivity issues between the two sites.Routers can have Frame Relay virtual circuit IPs statically mapped or dynamically discovered for each DLCI. An IP address can be statically mapped to a DLCI using the frame-relay map ip {x.x.x.x} {yyyy} command, where x.x.x.x is the mapped IP address and yyyy is the DLCI the IP address is being mapped to. In this command, the broadcast keyword can be used to specify that broadcast and multicast packets that are received on the interface are to be sent out that same interface using the DLCI specified in the command. Conversely, any DLCI mappings that lack the broadcast keyword will not have any broadcast or multicast packets sent through that DLCI whatsoever, including those originated by the router itself. A common use-case for this is when a routing protocol is in use within the network, as routing protocols will typically form neighborships and advertise routes via multicast packets. Note that the broadcast keyword does not override EIGRP’s split-horizon behavior, where EIGRP will not send advertisements for a route out of an interface if the route was learned on that same interface. This means that when utilizing EIGRP in conjunction with Frame Relay in a hub-and-spoke topology, EIGRP’s split-horizon behavior needs to be disabled on the interface using the no ip split-horizon eigrp {asn} command, where asn is the number chosen for your EIGRP autonomous system.Alternatively, a router can dynamically discover the IP address of the device on the other end of the virtual circuit. This can be done using the frame-relay interface-dlci {yyyy} command, where yyyy is the DLCI for that particular interface. Routers that dynamically discover the IP address of the device on the other end of the virtual circuit do so using Inverse ARP. Recall from your previous studies that the purpose of ARP is to find the MAC address of the device that holds a specific, known IP address. To be more formal, we have a known Layer 3 address that we wish to map to an unknown Layer 2 address, we use ARP in order to find the unknown Layer 2 address. As the name implies, Inverse ARP does the opposite: we have a known Layer 2 address (a DLCI) that we wish to map to an unknown Layer 3 address (an IP address).The output below demonstrates the Inverse ARP process through the lens of the debug frame-relay packet command after attempting to ping the IP address of the device on the other side of the virtual circuit:Router#ping 1.1.1.10Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 1.1.1.10, timeout is 2 seconds:.!!!!!Success rate is 80 percent (4/5), round-trip min/avg/max = 16/25/36 ms*Mar 1 04:27:52.366: Serial1/0:Encaps failed--no map entry link 7(IP)*Mar 1 04:27:53.674: Serial1/0(o): dlci 110(0x18E1), pkt encaps 0x0300 0x8000 0x0000 0x806 (ARP), datagramsize 34*Mar 1 04:27:53.674: FR: Sending INARP Request on interface Serial1/0 dlci 110 for link 7(IP)*Mar 1 04:27:53.758: broadcast dequeue*Mar 1 04:27:53.758: Serial1/0(o):Pkt sent on dlci 110(0x18E1), pkt encaps 0x300 0x8000 0x0 0x806 (ARP), datagramsize 34*Mar 1 04:27:53.790: Serial1/0(i): dlci 110(0x18E1), pkt encaps 0x0300 0x8000 0x0000 0x806 (ARP), datagramsize 34*Mar 1 04:27:53.794: Serial1/0: frame relay INARP received*Mar 1 04:27:54.366: Serial1/0(o): dlci 110(0x18E1), pkt type 0x800(IP), datagramsize 104*Mar 1 04:27:54.390: Serial1/0(i): dlci 110(0x18E1), pkt type 0x800, datagramsize 104*Mar 1 04:27:54.394: Serial1/0(o): dlci 110(0x18E1), pkt type 0x800(IP), datagramsize 104*Mar 1 04:27:54.410: Serial1/0(i): dlci 110(0x18E1), pkt type 0x800, datagramsize 104*Mar 1 04:27:54.418: Serial1/0(o): dlci 110(0x18E1), pkt type 0x800(IP), datagramsize 104*Mar 1 04:27:54.454: Serial1/0(i): dlci 110(0x18E1), pkt type 0x800, datagramsize 104*Mar 1 04:27:54.454: Serial1/0(o): dlci 110(0x18E1), pkt type 0x800(IP), datagramsize 104*Mar 1 04:27:54.470: Serial1/0(i): dlci 110(0x18E1), pkt type 0x800, datagramsize 104In particular, note how the router logs Encaps failed–no map entry link 7(IP), indicating that it does not have an IP address for this DLCI. Soon afterwards, it sends out an INARP Request message containing DLCI 110 as the Layer 2 address to be referenced by the remote router. Just afterwards, it receives an INARP Reply containing the Layer 3 IP address, and using this new information, it is able to send the remaining pings through the circuit.DLCIs that dynamically discover Layer 3 addresses using Inverse ARP will also forward any multicast or broadcast frames through that DLCI by default.EnhancementsCisco, StrataCom, Northern Telecom, and Digital Equipment Corporation came together in 1990 to create a number of additional features, functionality, and manageability to Frame Relay in a set of enhancements named LMI (Local Management Interface). One of the most significant of these enhancements are virtual circuit status messages between DTE devices and DCE devices. Simply put, a customer’s Frame Relay router and a service provider’s Frame Relay switch need a way to communicate with one another to report on the status and health of PVCs, and the LMI provides that functionality. The customer’s Frame Relay router sends out status-enquiry (or StEnq) messages every 10 seconds to the Frame Relay switch, which replies with status messages confirming the health of the link. Once every 60 seconds, the Frame Relay switch will respond with a full status message listing information about all of the known DLCIs. You can read more about the LMI messages and message format here. Below shows the output of debug frame-relay lmi on a healthy Frame Relay link, showing a normal status reply as well as a full status reply:*Mar 1 03:14:46.447: Serial1/0(out): StEnq, myseq 255, yourseen 254, DTE up*Mar 1 03:14:46.447: datagramstart = 0xF401614, datagramsize = 13*Mar 1 03:14:46.447: FR encap = 0xFCF10309*Mar 1 03:14:46.447: 00 75 01 01 01 03 02 FF FE*Mar 1 03:14:46.451:*Mar 1 03:14:46.467: Serial1/0(in): Status, myseq 255, pak size 13*Mar 1 03:14:46.467: RT IE 1, length 1, type 1*Mar 1 03:14:46.467: KA IE 3, length 2, yourseq 255, myseq 255Router#*Mar 1 03:14:56.447: Serial1/0(out): StEnq, myseq 1, yourseen 255, DTE up*Mar 1 03:14:56.447: datagramstart = 0xF401894, datagramsize = 13*Mar 1 03:14:56.447: FR encap = 0xFCF10309*Mar 1 03:14:56.447: 00 75 01 01 00 03 02 01 FF*Mar 1 03:14:56.451:*Mar 1 03:14:56.483: Serial1/0(in): Status, myseq 1, pak size 37*Mar 1 03:14:56.483: RT IE 1, length 1, type 0*Mar 1 03:14:56.483: KA IE 3, length 2, yourseq 1 , myseq 1*Mar 1 03:14:56.483: PVC IE 0x7 , length 0x6 , dlci 101, status 0x2 , bw 0*Mar 1 03:14:56.483: PVC IE 0x7 , length 0x6 , dlci 102, status 0x2 , bw 0*Mar 1 03:14:56.487: PVC IE 0x7 , length 0x6 , dlci 103, status 0x2 , bw 0CongestionFrame Relay utilizes a simple built-in congestion notification system through three bits in the Address field of the frame. These bits can be flipped by Frame Relay switches while forwarding traffic to indicate to two devices (the device sending traffic, and the device receiving traffic) whether the path being used between the two is congested or not. Under normal, healthy conditions, all three of these bits remain set at 0. The three bits correspond to three different notifications: FECN, BECN, and DE. FECN (Forward-Explicit Congestion Notification) is the first bit among the three. If this bit is set to 1 by a Frame Relay switch, it serves as a message to the destination device that the path that was used to send the frame is currently congested. BECN (Backward-Explicit Congestion Notification) is the second bit among the three. If this bit is set to 1 by a Frame Relay switch, it serves as a message to the source device that the path that was used to send the frame is currently congested. DE (Discard Eligibility) is the third bit among the three. If this bit is set to 1 by a DTE device (such as a router, host, etc.), then it indicates to a Frame Relay switch that it is a low-priority frame and can be dropped if there are congestion issues along the frame’s path. FECN and BECN can be very easy to confuse, since the only difference between the two is which specific bit is set, and which device is receiving the frame with the bit set. If you think of a frame as moving through the network from a source to a destination, a frame moves forward to the destination, while it would need to move backward to get to the source. Frames with FECN and BECN bits set are normally sent at the exact same time. The easiest way to identify how many frames have been received with FECN, BECN, and DE bits set is through the show frame-relay pvc command, shown below.Router#show frame pvcPVC Statistics for interface Serial1/0 (Frame Relay DTE)Active Inactive Deleted Static Local 1 0 0 0 Switched 0 0 0 0 Unused 0 0 0 0DLCI = 110, DLCI USAGE = LOCAL, PVC STATUS = ACTIVE, INTERFACE = Serial1/0.10input pkts 22635 output pkts 25877 in bytes 2244345 out bytes 3324994 dropped pkts 0 in pkts dropped 0 out pkts dropped 0 out bytes dropped 0 in FECN pkts 0 in BECN pkts 0 out FECN pkts 0 out BECN pkts 0 in DE pkts 0 out DE pkts 0 out bcast pkts 25520 out bcast bytes 2966834 5 minute input rate 11000 bits/sec, 0 packets/sec 5 minute output rate 11000 bits/sec, 0 packets/sec pvc create time 2d09h, last time pvc status changed 2d09hThis congestion notification system is simple for a good reason. Complex congestion detection and mitigation adds overhead to the protocol which causes reduced efficiency. Furthermore, in today’s networks, congestion detection and mitigation has been moved to the upper levels of the networking stack – TCP’s built-in windowing serves as a great example of this migration away from Layer 2 congestion handling.Frame Relay ConfigurationNow, it’s time for the fun stuff! We’re going to configure the topology below.This topology features a total of four routers, with one router located at a headquarters site and the other three routers at branch sites. Each router has a local /24 network, simulated using a loopback interface. All sites are connected to each other via a Frame Relay switch, which we will also configure. The end goal of our first lab will be to create PVCs between each branch router and the HQ router, then exchange local routes using a routing protocol.First, let’s configure the serial interfaces of each branch router as well as the HQ router. Each branch router will dynamically discover the IP address of the HQ router’s serial interface, while the HQ router will statically map each branch router’s IP address to a DLCI.B1#conf tEnter configuration commands, one per line. End with CNTL/Z.B1(config)#interface Serial1/0B1(config-if)#ip address 1.1.1.1 255.255.255.0B1(config-if)#encapsulation frame-relayB1(config-if)#frame-relay interface-dlci 110###############################B2#conf tEnter configuration commands, one per line. End with CNTL/Z.B2(config)#interface Serial1/0B2(config-if)#ip address 1.1.1.2 255.255.255.0B2(config-if)#encapsulation frame-relayB2(config-if)#frame-relay interface-dlci 210###############################B3#conf tEnter configuration commands, one per line. End with CNTL/Z.B3(config)#interface Serial1/0B3(config-if)#ip address 1.1.1.3 255.255.255.0B3(config-if)#encapsulation frame-relayB3(config-if)#frame-relay interface-dlci 310###############################HQ#conf tEnter configuration commands, one per line. End with CNTL/Z.HQ(config)#interface Serial1/0HQ(config-if)#ip address 1.1.1.10 255.255.255.0HQ(config-if)#encapsulation frame-relayHQ(config-if)#frame-relay map ip 1.1.1.1 101 broadcastHQ(config-if)#frame-relay map ip 1.1.1.2 102 broadcastHQ(config-if)#frame-relay map ip 1.1.1.3 103 broadcastNote that for the HQ router, each static mapping contains the broadcast keyword. As discussed before, this will allow broadcast and multicast packets received on each DLCI to be rebroadcasted back out to each of the remaining DLCIs. This will also facilitate our routing protocol configuration later on.Next, let’s finish establishing basic Frame Relay connectivity by configuring our Frame Relay switch.ISP#conf tEnter configuration commands, one per line. End with CNTL/Z.ISP(config)#frame-relay switchingISP(config)#interface Serial1/0ISP(config-if)#encapsulation frame-relayISP(config-if)#frame-relay intf-type dceISP(config-if)#frame-relay route 110 interface Serial1/1 101ISP(config-if)#exitISP(config)#interface Serial1/1ISP(config-if)#interface Serial1/1ISP(config-if)#encapsulation frame-relayISP(config-if)#frame-relay intf-type dceISP(config-if)#frame-relay route 101 interface Serial1/0 110ISP(config-if)#frame-relay route 102 interface Serial1/3 210ISP(config-if)#frame-relay route 103 interface Serial1/2 310ISP(config-if)#interface Serial1/2ISP(config-if)#encapsulation frame-relayISP(config-if)#frame-relay intf-type dceISP(config-if)#frame-relay route 310 interface Serial1/1 103ISP(config-if)#interface Serial1/3ISP(config-if)#encapsulation frame-relayISP(config-if)#frame-relay intf-type dceISP(config-if)#frame-relay route 210 interface Serial1/1 102This configuration gleans a small idea as to how a service provider must configure their Frame Relay infrastructure in order to provide connectivity between a customer’s sites. Each customer-facing interface must be configured to be a DCE interface, so that the service provider controls the clock rate and is able to enforce the CIR (Committed Information Rate) that the customer is paying for. Each customer-facing interface also must contain a frame-relay route statement, indicating: The DLCI of the interface The egress interface that ingress frames should be sent to The DLCI to be used for the egress interface.Now, our HQ router should be able to ping each of the branch routers without issue. You may need to try this command a few times before connectivity is established due to Inverse ARP dynamically discovering the IP address of our HQ router.HQ#ping 1.1.1.1Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 1.1.1.1, timeout is 2 seconds:!!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 16/20/28 msHQ#ping 1.1.1.2Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 1.1.1.2, timeout is 2 seconds:!!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 12/17/20 msHQ#ping 1.1.1.3Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 1.1.1.3, timeout is 2 seconds:!!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 8/20/28 msLastly, let’s configure EIGRP across all of our routers.B1(config)#router eigrp 1B1(config-router)#network 1.1.1.0 0.0.0.255B1(config-router)#network 192.168.1.0 0.0.0.255###############################B2(config)#router eigrp 1B2(config-router)#network 1.1.1.0 0.0.0.255B2(config-router)#network 192.168.2.0 0.0.0.255#########################B3(config)#router eigrp 1B3(config-router)#network 1.1.1.0 0.0.0.255B3(config-router)#network 192.168.3.0 0.0.0.255#########################HQ(config)#router eigrp 1HQ(config-router)#network 1.1.1.0 0.0.0.255HQ(config-router)#network 192.168.10.0 0.0.0.255HQ(config-router)#interface Serial1/0HQ(config-if)#no ip split-horizon eigrp 1Of course, never forget to verify all of your neighbors are up, and that routes have been exchanged across all routers as expected!HQ#show ip eigrp neighborsIP-EIGRP neighbors for process 1H Address Interface Hold Uptime SRTT RTO Q Seq (sec) (ms) Cnt Num2 1.1.1.3 Se1/0 163 00:21:01 42 252 0 61 1.1.1.2 Se1/0 150 01:46:34 40 240 0 70 1.1.1.1 Se1/0 170 01:47:04 429 2574 0 7HQ#show ip routeCodes: C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static routeGateway of last resort is not set1.0.0.0/8 is variably subnetted, 2 subnets, 2 masksC 1.1.1.0/24 is directly connected, Serial1/0D 1.0.0.0/8 is a summary, 00:23:00, Null0C 192.168.10.0/24 is directly connected, Loopback0D 192.168.1.0/24 [90/2297856] via 1.1.1.1, 00:23:27, Serial1/0D 192.168.2.0/24 [90/2297856] via 1.1.1.2, 00:23:18, Serial1/0D 192.168.3.0/24 [90/2297856] via 1.1.1.3, 00:21:56, Serial1/0B1#show ip routeCodes: C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static routeGateway of last resort is not set1.0.0.0/8 is variably subnetted, 2 subnets, 2 masksC 1.1.1.0/24 is directly connected, Serial1/0D 1.0.0.0/8 is a summary, 00:23:44, Null0D 192.168.10.0/24 [90/2297856] via 1.1.1.10, 00:23:18, Serial1/0C 192.168.1.0/24 is directly connected, Loopback0D 192.168.2.0/24 [90/2809856] via 1.1.1.10, 00:20:53, Serial1/0D 192.168.3.0/24 [90/2809856] via 1.1.1.10, 00:20:53, Serial1/0It looks like EIGRP is up and running! Now, after all that hard work, let’s rip it out and test our Frame Relay WAN with OSPF instead.B1(config)#no router eigrp 1B1(config)#router ospf 1B1(config-router)#network 192.168.1.0 0.0.0.255 area 0B1(config-router)#network 1.1.1.0 0.0.0.255 area 0#########################B2(config)#no router eigrp 1B2(config)#router ospf 1B2(config-router)#network 1.1.1.0 0.0.0.255 area 0B2(config-router)#network 192.168.2.0 0.0.0.255 area 0#########################B3(config)#no router eigrp 1B3(config)#router ospf 1B3(config-router)#network 192.168.3.0 0.0.0.255 area 0B3(config-router)#network 1.1.1.0 0.0.0.255 area 0#########################HQ(config)#no router eigrp 1HQ(config)#router ospf 1HQ(config-router)#network 192.168.10.0 0.0.0.255 area 0HQ(config-router)#network 1.1.1.0 0.0.0.255 area 0You will notice that after waiting about a minute, no OSPF neighbors on any of the routers are detected. This is because when OSPF was enabled on the Serial1/0 interface with the network command, it detected that Frame Relay was enabled on the interface and defaulted its network type to NBMA (NonBroadcast MultiAccess). This can be confirmed with the show ip ospf interface command:B1#show ip ospf interface Serial1/0 Serial1/0 is up, line protocol is up Internet Address 1.1.1.1/24, Area 0 Process ID 1, Router ID 192.168.1.1, Network Type NON_BROADCAST, Cost: 64Under this network type, OSPF does not send multicast Hello packets out of Serial1/0, and without another router receiving any Hello packets, we’ll never have an OSPF neighborship form! In order to form neighborships with our other routers, we have one of two options, depending on how we have configured Frame Relay throughout our network.Dynamic NeighborshipsThink back to when we configured Frame Relay on the Serial1/0 interface of HQ. We added the broadcast keyword on each of the DLCIs, which allows for multicast and broadcast packets to egress each of those DLCIs. On each branch router, we’re also dynamically discovering the Layer 3 address of each DLCI using Inverse ARP, which also allows for the egress of multicast and broadcast packets. Because of these previous decisions, our Frame Relay WAN is effectively acting the same as a broadcast network. The only thing we need to do on each router is change the OSPF network type of the serial interfaces to reflect this behavior!HQ(config)#interface Serial1/0HQ(config-if)#ip ospf network broadcast#########################B1(config)#interface Serial1/0B1(config-if)#ip ospf network broadcast#########################B2(config)#interface Serial1/0B2(config-if)#ip ospf network broadcast#########################B3(config)#interface Serial1/0B3(config-if)#ip ospf network broadcastAfter a few seconds, all OSPF neighbors should come up, and routes should be populated in the routing table!HQ#show ip ospf neighborNeighbor ID Pri State Dead Time Address Interface192.168.1.1 1 FULL/DROTHER 00:00:31 1.1.1.1 Serial1/0192.168.2.1 1 FULL/DROTHER 00:00:32 1.1.1.2 Serial1/0192.168.3.1 1 FULL/BDR 00:00:39 1.1.1.3 Serial1/0HQ#show ip routeCodes: C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static routeGateway of last resort is not set1.0.0.0/24 is subnetted, 1 subnetsC 1.1.1.0 is directly connected, Serial1/0C 192.168.10.0/24 is directly connected, Loopback0 192.168.1.0/32 is subnetted, 1 subnetsO 192.168.1.1 [110/65] via 1.1.1.1, 01:16:17, Serial1/0 192.168.2.0/32 is subnetted, 1 subnetsO 192.168.2.1 [110/65] via 1.1.1.2, 01:09:06, Serial1/0 192.168.3.0/32 is subnetted, 1 subnetsO 192.168.3.1 [110/65] via 1.1.1.3, 01:08:56, Serial1/0Those of you who are familiar with OSPF should notice something about this output. From the HQ router’s perspective, it is FULL with each router, but we only have a single neighbor that is claiming to be a BDR, while the other two are DROTHERs. Let’s investigate some more!HQ#show ip ospf neighbor 192.168.1.1 Neighbor 192.168.1.1, interface address 1.1.1.1 In the area 0 via interface Serial1/0 Neighbor priority is 1, State is FULL, 408 state changes DR is 1.1.1.10 BDR is 1.1.1.1HQ#show ip ospf neighbor 192.168.2.1 Neighbor 192.168.2.1, interface address 1.1.1.2 In the area 0 via interface Serial1/0 Neighbor priority is 1, State is FULL, 6 state changes DR is 1.1.1.10 BDR is 1.1.1.2HQ#show ip ospf neighbor 192.168.3.1 Neighbor 192.168.3.1, interface address 1.1.1.3 In the area 0 via interface Serial1/0 Neighbor priority is 1, State is FULL, 6 state changes DR is 1.1.1.10 BDR is 1.1.1.3This is interesting – how come when we look at the full OSPF neighbor table, we have one BDR and two DROTHERs, but when we look at each neighbor individually, each neighbor claims to be a BDR?Well, let’s go off on a tangent about OSPF’s DR/BDR election process real quick. In a traditional broadcast multiaccess environment, each router would have an interface active in the 1.1.1.0/24 network. Since we have more than one router connected to the same network, we need to elect a DR and BDR to represent the network through a Type 2 LSA. All OSPF routers compare priorities with each other and eventually settle on a DR and a BDR.However, in our network, not all routers can talk to each other. Each branch router only has a PVC with the HQ hub router, and is only able to communicate directly with the hub – branches cannot communicate directly with each other. Because the HQ router happens to have the highest priority out of all of them (it has the highest IPv4 up/up loopback interface, which is the first tiebreaker for choosing a router ID, the highest of which is used to determine the DR in a DR/BDR election when all OSPF priority values match), all branch routers unanimously (although independently, since they can’t speak with each other) choose HQ as its DR. Next, we need to choose our BDR, which is the second-highest router ID on the network. The HQ router can communicate with all three branches, and clearly sees that B3 wins the BDR election with a router ID of 192.168.3.1. However, the three branch routers cannot communicate with each other, so they’re unaware that anybody else is on the 1.1.1.0/24 network aside from themselves and the HQ router. Because the HQ router is the DR, and each branch believe it is the only other router on the network, each branch claims to be the BDR for the network.This behavior is reflected in our output above! The show ip ospf neighbor command displays what the local router (that is, the router that the command is executed on) believes to be true regarding its OSPF neighborships. However, the show ip ospf neighbor {x.x.x.x} (where x.x.x.x is the router ID of an OSPF neighbor) command shows what that specific neighbor believes to be true regarding the OSPF neighborship.The solution to this problem is documented in the Initial Configurations for OSPF over Frame Relay Subinterfaces guide: “…additional configuration is necessary in a hub and spoke topology to make sure that the hub routers, which have connectivity with every other spoke router, are elected as the DR and BDR. Alternatively, you can change the configuration on the NBMA interface to make OSPF believe that it is another network type that does not have these problems.”This “additional configuration” is the manual configuration of OSPF priority values on each router, such that the hub routers (if there are more than one) are the only routers configured to participate in the DR/BDR election. Spoke routers should be configured such that they do not participate in DR/BDR elections at all.B1(config)#interface Serial1/0B1(config-if)#ip ospf priority 0#########################B2(config)#interface Serial1/0B2(config-if)#ip ospf priority 0#########################B3(config)#interface Serial1/0B3(config-if)#ip ospf priority 0#########################HQ(config)#interface Serial1/0HQ(config-if)#ip ospf priority 255Now, let’s review the same show ip ospf neighbor command as we did before to verify our issue is resolved:HQ#show ip ospf neighborNeighbor ID Pri State Dead Time Address Interface192.168.1.1 0 FULL/DROTHER 00:00:37 1.1.1.1 Serial1/0192.168.2.1 0 FULL/DROTHER 00:00:38 1.1.1.2 Serial1/0192.168.3.1 0 FULL/DROTHER 00:00:39 1.1.1.3 Serial1/0HQ#show ip ospf neighbor 192.168.1.1 Neighbor 192.168.1.1, interface address 1.1.1.1 In the area 0 via interface Serial1/0 Neighbor priority is 0, State is FULL, 408 state changes DR is 1.1.1.10 BDR is 0.0.0.0HQ#show ip ospf neighbor 192.168.2.1 Neighbor 192.168.2.1, interface address 1.1.1.2 In the area 0 via interface Serial1/0 Neighbor priority is 0, State is FULL, 6 state changes DR is 1.1.1.10 BDR is 0.0.0.0HQ#show ip ospf neighbor 192.168.3.1 Neighbor 192.168.3.1, interface address 1.1.1.3 In the area 0 via interface Serial1/0 Neighbor priority is 0, State is FULL, 6 state changes DR is 1.1.1.10 BDR is 0.0.0.0There we go! Now that we’ve resolved that issue, let’s return to playing with Frame Relay configuration by experimenting with the broadcast keyword in the frame-relay map ip command. As we talked about earlier, the broadcast keyword allows for multicast and broadcast frames to egress out of the mapped DLCI. What happens if we remove that keyword from the command for B1’s DLCI?HQ(config)#interface Serial1/0HQ(config-if)#no frame-relay map ip 1.1.1.1 101 broadcastHQ(config-if)#frame-relay map ip 1.1.1.1 101After a short time, the OSPF neighborship on the HQ router starts flapping:*Mar 1 13:57:07.848: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Serial1/0 from LOADING to FULL, Loading Done*Mar 1 13:57:55.784: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Serial1/0 from LOADING to FULL, Loading Done*Mar 1 13:58:44.008: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Serial1/0 from LOADING to FULL, Loading DoneThis behavior also manifests on B1:*Mar 1 13:59:10.376: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.10.1 on Serial1/0 from FULL to DOWN, Neighbor Down: Dead timer expired*Mar 1 13:59:17.504: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.10.1 on Serial1/0 from LOADING to FULL, Loading Done*Mar 1 14:00:02.632: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.10.1 on Serial1/0 from FULL to DOWN, Neighbor Down: Dead timer expired*Mar 1 14:00:05.428: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.10.1 on Serial1/0 from LOADING to FULL, Loading Done*Mar 1 14:00:52.988: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.10.1 on Serial1/0 from FULL to DOWN, Neighbor Down: Dead timer expired*Mar 1 14:00:53.648: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.10.1 on Serial1/0 from LOADING to FULL, Loading DoneLet’s think about what’s happening here. HQ can no longer send multicast or broadcast to B1’s DLCI, but it can still receive multicast and broadcast traffic from B1. B1 continues to send multicast OSPF Hello packets to HQ, but HQ is unable to send a multicast OSPF Hello packet in reply. Traditionally, OSPF routers will exchange Hello packets and quickly move their neighborship states from DOWN to INIT to 2-WAY, then transition to EXSTART as they begin exchanging DBD packets. However, OSPF routers can also skip the INIT state and go straight to 2-WAY if they receive DBD packets from a neighbor in the INIT state (or, in other words, if they receive DBD messages on an interface they’ve sent an OSPF Hello packet out of).HQ cannot send multicast or broadcast packets, but luckily, DBD packets (as well as LSRs, LSUs, and LSAcks) are unicast in nature, and B1 has identified its IP address in the Hello packet it was able to send to HQ. Therefore, the two routers are able to form a neighborship and progress to a FULL state. However, in OSPF, multicast Hello packets are also used as a keepalive between neighbors. Because HQ is unable to send these keepalive messages to B1, B1 eventually declares the HQ dead and tears down the neighborship. However, B1 continues to send multicast Hello packets out of the HQ PVC, and so the whole process starts over again.Static NeighborshipsIf changing the OSPF network type from NBMA to broadcast doesn’t suit your fancy, we’ll need to configure static OSPF neighbors for each of the PVCs. Keep in mind that OSPF DR/BDR elections occur on NBMA networks as well, so we will need to retain our OSPF priority configuration from our previous adventure with dynamic neighborships.B1(config)#router ospf 1B1(config-router)#neighbor 1.1.1.10#########################B2(config)#router ospf 1B2(config-router)#neighbor 1.1.1.10#########################B3(config)#router ospf 1B3(config-router)#neighbor 1.1.1.10#########################HQ(config)#router ospf 1HQ(config-router)#neighbor 1.1.1.1HQ(config-router)#neighbor 1.1.1.2HQ(config-router)#neighbor 1.1.1.3Shortly afterwards, we will see neighborships form on the HQ router.*Mar 1 14:39:56.524: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.3.1 on Serial1/0 from LOADING to FULL, Loading Done*Mar 1 14:39:56.528: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Serial1/0 from LOADING to FULL, Loading Done*Mar 1 14:39:56.532: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.2.1 on Serial1/0 from LOADING to FULL, Loading DoneWe can also confirm on our branch routers that routes have been installed, and that the HQ router is the DR.B1#show ip routeCodes: C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static routeGateway of last resort is not set1.0.0.0/24 is subnetted, 1 subnetsC 1.1.1.0 is directly connected, Serial1/0 192.168.10.0/32 is subnetted, 1 subnetsO 192.168.10.1 [110/65] via 1.1.1.10, 00:01:39, Serial1/0C 192.168.1.0/24 is directly connected, Loopback0 192.168.2.0/32 is subnetted, 1 subnetsO 192.168.2.1 [110/65] via 1.1.1.2, 00:01:39, Serial1/0 192.168.3.0/32 is subnetted, 1 subnetsO 192.168.3.1 [110/65] via 1.1.1.3, 00:01:39, Serial1/0B1#show ip ospf neighborNeighbor ID Pri State Dead Time Address Interface192.168.10.1 255 FULL/DR 00:01:56 1.1.1.10 Serial1/0SubinterfacesSubinterfaces are simply virtual interfaces attached to a physical interface that primarily allow us to overcome split horizon issues that can be encountered when Frame Relay is configured on the physical interface. Frame Relay subinterfaces must be configured in one of two modes: point-to-point, and multipoint. Interestingly enough, the configuration for each mode matches configuration that we’ve already performed on physical interfaces in this lab! Both point-to-point and multipoint subinterfaces utilize the frame-relay interface-dlci {xxx} (where xxx is the DLCI of the link) command and the frame-relay map ip {x.x.x.x} {yyyy} (where x.x.x.x is the Layer 3 IP address, and yyyy is the Layer 2 DLCI) command, depending on whether Layer 3 addresses can be discovered via Inverse ARP or whether Layer 3 addresses must be mapped to specific Layer 2 addresses.To demonstrate the configuration of each, we are going to set up point-to-point subinterfaces on all three branch routers, then set up three point-to-point subinterfaces on HQ for all three branch routers. In order to do this, we’ll need to change our IP addressing scheme slightly, as a single subnet can only be configured on one interface at a time (within the same VRF, of course.) To make it simple, B1 and HQ will share 1.1.1.0/30, B2 and HQ will share 2.2.2.0/30, and B3 and HQ will share 3.3.3.0/30. We will also need to rip out OSPF and convert back to EIGRP so that split horizon is proven to not be an issue with subinterfaces. The below configuration assumes that IP addresses and Frame Relay configuration (aside from encapsulation frame-relay, of course) were removed from the physical interfaces of all routers.B1(config)#interface Serial1/0.10 point-to-pointB1(config-subif)#ip address 1.1.1.1 255.255.255.252B1(config-subif)#frame-relay interface-dlci 110B1(config)#no router ospf 1B1(config)#router eigrp 1B1(config-router)#network 1.1.1.0 0.0.0.3B1(config-router)#network 192.168.1.0 0.0.0.255#########################B2(config)#interface Serial1/0.10 point-to-pointB2(config-subif)#ip address 2.2.2.1 255.255.255.252B2(config-subif)#frame-relay interface-dlci 210B2(config)#no router ospf 1B2(config)#router eigrp 1B2(config-router)#network 2.2.2.0 0.0.0.3B2(config-router)#network 192.168.2.0 0.0.0.255#########################B3(config)#interface Serial1/0.10 point-to-pointB3(config-subif)#ip address 3.3.3.1 255.255.255.252B3(config-subif)#frame-relay interface-dlci 310B3(config)#no router ospf 1B3(config)#router eigrp 1B3(config-router)#network 3.3.3.0 0.0.0.3B3(config-router)#network 192.168.3.0 0.0.0.255#########################HQ(config)#interface Serial1/0.10 point-to-pointHQ(config-subif)#ip address 1.1.1.2 255.255.255.252HQ(config-subif)#frame-relay interface-dlci 101HQ(config)#interface Serial1/0.20 point-to-pointHQ(config-subif)#ip address 2.2.2.2 255.255.255.252HQ(config-subif)#frame-relay interface-dlci 102HQ(config)#interface Serial1/0.30 point-to-pointHQ(config-subif)#ip address 3.3.3.2 255.255.255.252HQ(config-subif)#frame-relay interface-dlci 103HQ(config)#no router ospf 1HQ(config)#router eigrp 1HQ(config-router)#network 1.1.1.0 0.0.0.3HQ(config-router)#network 2.2.2.0 0.0.0.3HQ(config-router)#network 3.3.3.0 0.0.0.3HQ(config-router)#network 192.168.10.0 0.0.0.255After some time, all subinterfaces should be up/up and EIGRP should converge. We should also see EIGRP routes in our routing table, despite the fact we have not configured no ip split-horizon eigrp 1 on any of HQ’s interfaces.HQ#show ip eigrp neighborsIP-EIGRP neighbors for process 1H Address Interface Hold Uptime SRTT RTO Q Seq (sec) (ms) Cnt Num2 3.3.3.1 Se1/0.30 14 00:00:37 988 5000 0 31 2.2.2.1 Se1/0.20 11 00:00:40 529 3174 0 30 1.1.1.1 Se1/0.10 13 00:00:43 432 2592 0 3HQ#show ip route eigrp 1.0.0.0/8 is variably subnetted, 2 subnets, 2 masksD 1.0.0.0/8 is a summary, 00:00:46, Null0 2.0.0.0/8 is variably subnetted, 2 subnets, 2 masksD 2.0.0.0/8 is a summary, 00:00:46, Null0 3.0.0.0/8 is variably subnetted, 2 subnets, 2 masksD 3.0.0.0/8 is a summary, 00:00:43, Null0D 192.168.1.0/24 [90/2297856] via 1.1.1.1, 00:00:47, Serial1/0.10D 192.168.2.0/24 [90/2297856] via 2.2.2.1, 00:00:44, Serial1/0.20D 192.168.3.0/24 [90/2297856] via 3.3.3.1, 00:00:41, Serial1/0.30ConclusionWe’ve explored what Frame Relay is, why it was created, how it works, and some potential issues one could encounter when configuring a routing protocol over a Frame Relay WAN. It is my hope that now that you are armed with this information, you are able to configure and troubleshoot Frame Relay enough to resolve common issues with it in the real world, as well as have the knowledge to logically answer Frame Relay questions that appear on your CCNP ROUTE exam!I hope this has been helpful!" }, { "title": "Basics of IOS XR Software", "url": "/Basics-Of-IOS-XR-Software/", "categories": "", "tags": "", "date": "2017-11-29 00:00:00 -0500", "snippet": "This article highlights the basics of IOS XR software, with the end goal being the education of an individual who desires to understand and upgrade the software of an IOS XR device. Topics that are covered include software types and states, software package downloading, addition, installation, and commission, turbobooting an IOS XR device, and some common caveats an individual might encounter when upgrading or downgrading the software of an IOS XR device.Software TypesCisco IOS XR software is divided into software packages so that you can select which features run on your router. Each package contains the components to perform a specific set of router functions, such as routing, security, or modular services card (MSC) support. Bundles are groups of packages that can be downloaded as a set. For example, Cisco IOS XR Unicast Routing Core Bundle (known as mini) provides the main packages for use on every router.Software packages are divided into two major groups: PIEs, and SMUs. PIEs (Packet Installation Envelope) are nonbootable files that contain a single package or a set of packages (called a composite package or bundle). Because the files are nonbootable, they are used to add software package files to a running router. They are distinguishable by the word “pie” within the filename, such as asr9k-fpd-px.pie-5.2.4. SMUs (Software Maintenance Upgrade) are nonbootable files that contain fixes for a specific defect. Some SMUs fix one specific defect, while others bundle together multiple fixes for multiple defects. SMUs are created to respond to immediate issues and do not include new features. Typically, SMUs do not have a large impact on router operations. SMU versions are synchronized to the package major, minor, and maintenance versions they upgrade. They are easily distinguishable from PIEs by the defect ID included in the filename as well as the .pie file extension, such as in asr9k-invmgr-5.2.4.CSCuz20763.pie. Put simply, PIEs add functionality to the device, while SMUs fix defects.Software StatesSoftware packages can have four states: inactive, active, committed, and superceded. Inactive indicates that the software package has been added to the device’s repository, but the package is not currently running. Put simply, it is a “staging” point for software packages before they can become active. Active indicates that the software package is currently running on the device. Committed indicates that the software package will become active if the device reloads. Superceded indicates that another software package contains a fix for the same defect as the superceded SMU. The superceded SMU is installed, but no longer necessary and can be removed manually by the user.It is important to note that software packages can be in both the active state and the committed state at the same time. This indicates that the software package is currently running and will continue to run after a chassis reload. This is demonstrated in the output below. RP/0/RSP0/CPU0:ASR9006-PE2#show install summary Wed Jan 1 23:41:08.224 UTC Default Profile: SDRs: Owner Active Packages: disk0:asr9k-services-infra-5.3.4 disk0:asr9k-9000v-nV-px-5.3.4 disk0:asr9k-doc-px-5.3.4 disk0:asr9k-mini-px-5.3.4 disk0:asr9k-mcast-px-5.3.4 disk0:asr9k-mpls-px-5.3.4 disk0:asr9k-services-px-5.3.4 disk0:asr9k-bng-px-5.3.4 disk0:asr9k-mgbl-px-5.3.4 disk0:asr9k-optic-px-5.3.4 Inactive Packages: disk0:asr9k-li-px-5.3.4 disk0:asr9k-fpd-px-5.3.4 disk0:asr9k-video-px-5.3.4 Committed Packages: disk0:asr9k-services-infra-5.3.4 disk0:asr9k-9000v-nV-px-5.3.4 disk0:asr9k-doc-px-5.3.4 disk0:asr9k-mini-px-5.3.4 disk0:asr9k-mcast-px-5.3.4 disk0:asr9k-mpls-px-5.3.4 disk0:asr9k-services-px-5.3.4 disk0:asr9k-bng-px-5.3.4 disk0:asr9k-mgbl-px-5.3.4 disk0:asr9k-optic-px-5.3.4 Superceded Packages: No packages.It might be helpful to think of the active state like a device’s running-configuration, while the committed state is a device’s startup-configuration, except the states refer to software packages instead of configuration.All active software packages must be of the same version of code. Software packages cannot be mixed between different versions of code. For example, you cannot activate a SMU for 6.1.4 when your active PIEs are for 5.3.4.Software Package Activation, Deactivation, and CommittingSoftware Package IdentificationBefore modifying any software packages on an IOS XR device, you should verify that all hardware is in a stable, working state. This can be verified with the admin show platform command. Stable devices are dictated with a state of IOS XR RUN, READY, or OK.The first step to changing IOS XR software packages is to determine what software packages are currently active on the device. This can be easily done with the show install active summary command, as shown below: RP/0/RSP0/CPU0:ASR9006-PE2#show install active summary Wed Jan 1 23:58:16.494 UTC Default Profile: SDRs: Owner Active Packages: disk0:asr9k-services-infra-5.3.4 disk0:asr9k-9000v-nV-px-5.3.4 disk0:asr9k-doc-px-5.3.4 disk0:asr9k-mini-px-5.3.4 disk0:asr9k-mcast-px-5.3.4 disk0:asr9k-mpls-px-5.3.4 disk0:asr9k-services-px-5.3.4 disk0:asr9k-bng-px-5.3.4 disk0:asr9k-mgbl-px-5.3.4 disk0:asr9k-optic-px-5.3.4In the above output, our device is running 5.3.4 PIEs, and no SMUs. We will need to download the same PIE files for the 6.0.2 version of code in order to upgrade this box to 6.0.2.On CCO, PIEs and SMUs are segregated under different software types, as shown below. PIEs can be located under IOS XR Software, while SMUs are located under either “IOS XR Software Maintenance Upgrades (SMU)” or “IOS XR Software Maintenance Upgrades (SMU) Bundles”, depending on the specific SMU.PIE files cannot be downloaded individually – instead, all of the possible PIE files for a version of code are bundled together in a tar file. This is shown in the screenshot below, with the appropriate tar file that we need to download marked:Within this tar file, we can see each individual PIE file as shown below.From here, there are two different paths that can be taken. The first option is to extract each individual necessary PIE file from the tar, upload each one to an FTP server, and add each PIE file as an inactive software package individually. The second option is to extract each individual necessary PIE file from the tar, create a new tar containing the PIE files you need, uploading the custom tar file to the FTP server, and adding the contents of the custom tar file to the device as inactive software packages. Both options are explored in detail further below.Before we move forward, take note that the “mini-px.vm” PIE file is not a normal software package. It is a VM image that is used to turboboot the chassis for the purposes of disaster recovery. Do not attempt to install or activate the “mini-px.vm” file as a normal software package.Adding Software Packages IndividuallyWe can extract the individual PIE files needed in order to upgrade our device to 6.0.2, then upload them to an FTP server so that we can transfer them to the device. The specific PIE files needed to upgrade our device are as follows: disk0:asr9k-services-infra-6.0.2 disk0:asr9k-9000v-nV-px-6.0.2 disk0:asr9k-doc-px-6.0.2 disk0:asr9k-mini-px-6.0.2 disk0:asr9k-mcast-px-6.0.2 disk0:asr9k-mpls-px-6.0.2 disk0:asr9k-services-px-6.0.2 disk0:asr9k-bng-px-6.0.2 disk0:asr9k-mgbl-px-6.0.2 disk0:asr9k-optic-px-6.0.2Next, from our device, we need to add each of the desired PIE files to our repository so that they appear in show install active summary as inactive software packages. We can do this with the admin install add source ftp://username:password@ftp-server/subdirectory pie-file command, demonstrated below.RP/0/RSP0/CPU0:ASR9006-PE2#admin install add source ftp://username:password@192.0.2.10/XR-602-temp asr9k-mini-px.pie-6.0.2 asr9k-services-px.pie-6.0.2 asr9k-services-infra-px.pie-6.0.2 asr9k-optic-px.pie-6.0.2 asr9k-doc-px.pie-6.0.2 asr9k-bng-px.pie-6.0.2 asr9k-fpd-px.pie-6.0.2 asr9k-mpls-px.pie-6.0.2$ Wed Jan 1 09:47:30.157 UTC Install operation 888 &#39;(admin) install add source /ftp://username:********@192.0.2.10/XR-602-temp/ asr9k-mini-px.pie-6.0.2 asr9k-services-px.pie-6.0.2 asr9k-services-infra-px.pie-6.0.2 asr9k-optic-px.pie-6.0.2 asr9k-doc-px.pie-6.0.2 asr9k-bng-px.pie-6.0.2 asr9k-fpd-px.pie-6.0.2 asr9k-mpls-px.pie-6.0.2 asr9k-mcast-px.pie-6.0.2 asr9k-mgbl-px.pie-6.0.2 asr9k-k9sec-px.pie-6.0.2 asr9k-asr9000v-nV-px.pie-6.0.2&#39; started by user &#39;admin&#39; via CLI at 09:47:30 UTC Wed Jan 01 2014. The install operation will continue asynchronously.By default, most admin install commands will perform asynchronously in the background. If you’d like to actively monitor the progress of a command, you can add the synchronous keyword afterwards. Otherwise, you can monitor the progress of an asynchronous command with the show install request command.Adding Software Packages In A TarWe can extract the individual PIE files needed in order to upgrade our device to 6.0.2, then upload them to an FTP server so that we can transfer them to the device. The specific PIE files needed to upgrade our device are as follows: disk0:asr9k-services-infra-6.0.2 disk0:asr9k-9000v-nV-px-6.0.2 disk0:asr9k-doc-px-6.0.2 disk0:asr9k-mini-px-6.0.2 disk0:asr9k-mcast-px-6.0.2 disk0:asr9k-mpls-px-6.0.2 disk0:asr9k-services-px-6.0.2 disk0:asr9k-bng-px-6.0.2 disk0:asr9k-mgbl-px-6.0.2 disk0:asr9k-optic-px-6.0.2Next, from our device, we need to add each of the desired PIE files to our repository so that they appear in show install active summary as inactive software packages. We can do this with the admin install add source ftp://username:password@ftp-server/subdirectory pie-file command, demonstrated below.RP/0/RSP0/CPU0:ASR9006-PE2#admin install add source ftp://username:password@192.0.2.10/XR-602-temp asr9k-mini-px.pie-6.0.2 asr9k-services-px.pie-6.0.2 asr9k-services-infra-px.pie-6.0.2 asr9k-optic-px.pie-6.0.2 asr9k-doc-px.pie-6.0.2 asr9k-bng-px.pie-6.0.2 asr9k-fpd-px.pie-6.0.2 asr9k-mpls-px.pie-6.0.2$ Wed Jan 1 09:47:30.157 UTC Install operation 888 &#39;(admin) install add source /ftp://username:********@192.0.2.10/XR-602-temp/ asr9k-mini-px.pie-6.0.2 asr9k-services-px.pie-6.0.2 asr9k-services-infra-px.pie-6.0.2 asr9k-optic-px.pie-6.0.2 asr9k-doc-px.pie-6.0.2 asr9k-bng-px.pie-6.0.2 asr9k-fpd-px.pie-6.0.2 asr9k-mpls-px.pie-6.0.2 asr9k-mcast-px.pie-6.0.2 asr9k-mgbl-px.pie-6.0.2 asr9k-k9sec-px.pie-6.0.2 asr9k-asr9000v-nV-px.pie-6.0.2&#39; started by user &#39;admin&#39; via CLI at 09:47:30 UTC Wed Jan 01 2014. The install operation will continue asynchronously.By default, most admin install commands will perform asynchronously in the background. If you’d like to actively monitor the progress of a command, you can add the synchronous keyword afterwards. Otherwise, you can monitor the progress of an asynchronous command with the show install request command.Activating Software PackagesOnce software packages have been added to the device’s repository and appear as inactive packages when the show install summary command is run, the device can be upgraded to a new version of software by activating the respective packages. The command to do so is admin install activate disk0:package.pie. This command allows for any number of software packages to be activated by enumerating them within the command, as shown below.RP/0/RSP0/CPU0:ios#admin install activate disk0:asr9k-services-infra-6.0.2 disk0:asr9k-services-px-6.0.2 disk0:asr9k-mini-px-6.0.2 disk0:asr9k-optic-px-6.0.2 disk0:asr9k-doc-px-6.0.2 disk0:asr9k-bng-px-6.0.2 disk0:asr9k-fpd-px-6.0.2 disk0:asr9k-mpls-px-6.0.2 disk0:asr9k-mcast-px-6.0.2 disk0:asr9k-mgbl-px-6.0.2 disk0:asr9k-k9sec-px-6.0.2 disk0:asr9k-9000v-nV-px-6.0.2 Thu Jan 2 05:03:52.319 UTC RP/0/RSP0/CPU0:Jan 2 05:03:52.453 : instdir[251]: %INSTALL-INSTMGR-6-INSTALL_OPERATION_STARTED : Install operation 917 &#39;(admin) install activate disk0:asr9k-services-infra-6.0.2 disk0:asr9k-services-px-6.0.2 disk0:asr9k-mini-px-6.0.2 disk0:asr9k-optic-px-6.0.2 disk0:asr9k-doc-px-6.0.2 disk0:asr9k-bng-px-6.0.2 disk0:asr9k-fpd-px-6.0.2 disk0:asr9k-mpls-px-6.0.2 disk0:asr9k-mcast-px-6.0.2 Install operation 917 &#39;(admin) install activate disk0:asr9k-services-infra-6.0.2disk0:asr9k-mgbl-px-6.0.2 disk0:asr9k-k9sec-px-6.0.2 disk0:asr9k-9000v-nV-px-...&#39; started by user &#39;admin&#39; disk0:asr9k-services-px-6.0.2 disk0:asr9k-mini-px-6.0.2 disk0:asr9k-optic-px-6.0.2 disk0:asr9k-doc-px-6.0.2 disk0:asr9k-bng-px-6.0.2 disk0:asr9k-fpd-px-6.0.2 disk0:asr9k-mpls-px-6.0.2 disk0:asr9k-mcast-px-6.0.2 disk0:asr9k-mgbl-px-6.0.2 disk0:asr9k-k9sec-px-6.0.2 disk0:asr9k-9000v-nV-px-6.0.2&#39; started by user &#39;admin&#39; via CLI at 05:03:52 UTC Thu Jan 02 2014. Info: This operation will reload the following nodes in parallel: Info: 0/RSP0/CPU0 (RP) (SDR: Owner) Info: 0/RSP1/CPU0 (RP) (SDR: Owner) Info: 0/0/CPU0 (LC) (SDR: Owner) Proceed with this install operation (y/n)? [y] Info: Install Method: Parallel Reload The install operation will continue asynchronously.When changing the software version of the chassis, the chassis will reload once the new version of software packages have been activated. If you are adding a software package to a chassis, but not changing the software version, then the chassis will not typically reload.If you have added a large number of software packages to a device’s repository, IOS XR conveniently allows you to perform actions on all of them at once by referring to the install operation ID, which is given to you in the output following an admin install add command. An example of this is shown below, with the install operation ID bolded.RP/0/RSP0/CPU0:ios#admin install add source ftp://username:password@192.0.2.10 asr9k-mini-px.pie-6.0.2 asr9k-services-px.pie-6.0.2 asr9k-services-infra-px.pie-6.0.2 asr9k-optic-px.pie-6.0.2 asr9k-doc-px.pie-6.0.2 asr9k-bng-px.pie-6.0.2 asr9k-fpd-px.pie-6.0.2 asr9k-mpls-px.pie-6.0.2 asr9k-mcast-px.pie-6.0.2 asr9k-mgbl-px.pie-6.0.2 asr9k-k9sec-px.pie-6.0.2 asr9k-asr9000v-nV-px.pie-6.0.2 Thu Jan 2 04:37:48.487 UTC Install operation 916 &#39;(admin) install add source /ftp://username:********@192.0.2.10/ asr9k-mini-px.pie-6.0.2 asr9k-services-px.pie-6.0.2 asr9k-services-infra-px.pie-6.0.2 asr9k-optic-px.pie-6.0.2 asr9k-doc-px.pie-6.0.2 asr9k-bng-px.pie-6.0.2 asr9k-fpd-px.pie-6.0.2 asr9k-mpls-px.pie-6.0.2 asr9k-mcast-px.pie-6.0.2 asr9k-mgbl-px.pie-6.0.2 asr9k-k9sec-px.pie-6.0.2 asr9k-asr9000v-nV-px.pie-6.0.2&#39; started by user &#39;admin&#39; via CLI at 04:37:48 UTC Thu Jan 02 2014. The install operation will continue asynchronously.The command to activate all of the software packages included in an install operation ID is admin install activate id XXX, where XXX is the install operation ID given to you by the output of an admin install add command. An example of this is shown below.RP/0/RSP0/CPU0:ios#admin install add source ftp://username:password@192.0.2.10 asr9k-m$ Wed Jan 29 22:17:56.249 UTC Install operation 484 &#39;(admin) install add source /ftp://username:********@192.0.2.10/ asr9k-mini-px.pie-6.0.2 asr9k-fpd-px.pie-6.0.2 asr9k-mpls-px.pie-6.0.2 asr9k-mcast-px.pie-6.0.2 asr9k-mgbl-px.pie-6.0.2 asr9k-k9sec-px.pie-6.0.2 asr9k-asr9000v-nV-px.pie-6.0.2&#39; started by user &#39;admin&#39; via CLI at 22:17:56 UTC Wed Jan 29 2014. The install operation will continue asynchronously. RP/0/RSP0/CPU0:ios#Info: The following packages are now available to be activated: Info: Info: disk0:asr9k-mini-px-6.0.2 Info: disk0:asr9k-fpd-px-6.0.2 Info: disk0:asr9k-mpls-px-6.0.2 Info: disk0:asr9k-mcast-px-6.0.2 Info: disk0:asr9k-mgbl-px-6.0.2 Info: disk0:asr9k-k9sec-px-6.0.2 Info: disk0:asr9k-9000v-nV-px-6.0.2 Info: Info: The packages can be activated across the entire router. Info: Install operation 484 completed successfully at 22:26:29 UTC Wed Jan 29 2014.RP/0/RSP0/CPU0:ios#admin install activate id 484 Wed Jan 29 22:27:09.668 UTC Install operation 485 &#39;(admin) install activate id 484&#39; started by user &#39;admin&#39; via CLI at 22:27:09 UTC Wed Jan 29 2014. Info: This operation will activate the following packages: Info: disk0:asr9k-9000v-nV-px-6.0.2 Info: disk0:asr9k-k9sec-px-6.0.2 Info: disk0:asr9k-mgbl-px-6.0.2 Info: disk0:asr9k-mcast-px-6.0.2 Info: disk0:asr9k-mpls-px-6.0.2 Info: disk0:asr9k-fpd-px-6.0.2 Info: disk0:asr9k-mini-px-6.0.2 Info: This operation will reload the following nodes in parallel: Info: 0/RSP0/CPU0 (RP) (SDR: Owner) Info: 0/RSP1/CPU0 (RP) (SDR: Owner) Info: 0/0/CPU0 (LC) (SDR: Owner) Proceed with this install operation (y/n)? [y] Info: Install Method: Parallel Reload The install operation will continue asynchronously.When activating PIEs to upgrade or downgrade a device’s software version, all activated PIEs must be replaced with their new versions simultaneously. The admin install activate command allows for the user to select multiple PIEs to facilitate this process.PIE versions that are being replaced are automatically deactivated when the new PIE is activated. For example, when upgrading asr9k-fpd-px.pie-5.3.4 to asr9k-fpd-px.pie-6.0.2, asr9k-fpd-px.pie-5.3.4 is automatically deactivated when the admin install activate disk0:asr9k-fpd-px.pie-6.0.2 command is executed. This only happens with PIEs; activating a SMU does not cause previous versions of the SMUs, or the package to which the SMU applies, to be automatically deactivated.Deactivating Software PackagesSoftware packages can be manually deactivated to remove unnecessary functionality or bugfixes from the device. To do this, verify that the software package is currently active by ensuring it shows up under Active Packages in the output of show install active summary. Next, deactivate the software package with the admin install deactivate disk0:package.pie command, demonstrated below.RP/0/RSP0/CPU0:ios#admin install deactivate disk0:asr9k-services-infra-6.1.2 disk0:asr9k-video-px-6.1.2 disk0:asr9k-services-px-6.1.2 disk0:asr9k-optic-px-6.1.2 disk0:asr9k-li-px-6.1.2 disk0:asr9k-doc-px-6.1.2 disk0:asr9k-bng-px-6.1.2 Mon Nov 17 04:31:58.831 UTC Install operation 538 &#39;(admin) install deactivate disk0:asr9k-services-infra-6.1.2 disk0:asr9k-video-px-6.1.2 disk0:asr9k-services-px-6.1.2 disk0:asr9k-optic-px-6.1.2 disk0:asr9k-li-px-6.1.2 disk0:asr9k-doc-px-6.1.2 disk0:asr9k-bng-px-6.1.2&#39; started by user &#39;admin&#39; via CLI at 04:31:59 UTC Mon Nov 17 2014. Info: The following sequence of sub-operations has been determined to minimize any impact: Info: Info: Sub-operation 1: Info: Install Method: Parallel Process Restart Info: asr9k-services-infra-6.1.2 Info: Info: Sub-operation 2: Info: Install Method: Parallel Process Restart Info: asr9k-li-px-6.1.2 Info: Info: Sub-operation 3: Info: Install Method: Parallel Process Restart Info: asr9k-services-px-6.1.2 Info: Info: Sub-operation 4: Info: Install Method: Parallel Process Restart Info: asr9k-video-px-6.1.2 Info: Info: Sub-operation 5: Info: Install Method: Parallel Process Restart Info: asr9k-optic-px-6.1.2 Info: Info: Sub-operation 6: Info: Install Method: Parallel Process Restart Info: asr9k-doc-px-6.1.2 Info: Info: Sub-operation 7: Info: Install Method: Parallel Process Restart Info: asr9k-bng-px-6.1.2 Info: The install operation will continue asynchronously.Committing Software PackagesWhen a software package is activated, it is best practice to commit the change to the chassis so that the software package activation persists after a chassis reload. This is done by running the admin install commit command after the desired software packages have been activated and the chassis has reloaded. This is demonstrated below. RP/0/RSP0/CPU0:Nov 17 04:45:25.825 : instdir[255]: %INSTALL-INSTMGR-4-ACTIVE_SOFTWARE_COMMITTED_INFO : The currently active software is not committed. If the system reboots then the committed software will be used. Use &#39;install commit&#39; to commit the active software. Install operation 538 completed successfully at 04:45:25 UTC Mon Nov 17 2014.RP/0/RSP0/CPU0:ios#admin install commit Mon Nov 17 04:51:57.625 UTC Install operation 539 &#39;(admin) install commit&#39; started by user &#39;admin&#39; via CLI at 04:51:58 UTC Mon Nov 17 2014. | 100% complete: The operation can no longer be aborted (ctrl-c for options) RP/0/RSP0/CPU0:Nov 17 04:52:06.522 : instdir[255]: %INSTALL-INSTMGR-4-ACTIVE_SOFTWARE_COMMITTED_INFO : The currently active software is now the same as the committed software. Install operation 539 completed successfully at 04:52:06 UTC Mon Nov 17 2014.If you do not commit the software changes to the chassis, then a chassis reload will cause the chassis to revert to the previously-committed activated software packages. For example, if active software packages are upgraded from 5.3.4 to 6.1.4, but the admin install commit command is not run after the chassis reloads due to the upgrade, a subsequent chassis reload will result in the device reverting to 5.3.4 versions of the active software packages.TurbobootingTurbobooting is a highly-disruptive disaster recovery procedure that provides a clean software installation on an IOS XR device. Turbobooting is only performed by modifying the configuration register of the device such that it boots into ROMMON, reloading the chassis, setting variables within ROMMON, and booting from the mini-vm image matching the desired software version via TFTP.Keep in mind that turbobooting is a time-intensive method of modifying a device’s IOS XR software version and should only be used as a last resort.Turbobooting can be performed on a device with a single RSP or dual RSPs. If a device has dual RSPs, only a single RSP needs to be turbobooted. The process below will assume that the IOS XR device being turbobooted has multiple RSPs.First, verify that the mini-vm image matching the desired software version is uploaded to an FTP server that is reachable by the XR device. An example of the filename for the mini-vm image is asr9k-mini-px.vm-5.3.4, where the software version at the end of the filename matches the software version you desire the chassis to be running after the turbobooting process is complete.Next, modify the configuration register of the device’s RSPs to 0x0 using the admin config-register 0x0 command, as demonstrated below. This will cause all RSPs to drop into ROMMON when reloaded.RP/0/RSP0/CPU0:ios#admin config-register 0x0 Sat Nov 18 02:47:31.597 UTC Successfully set config-register to 0x0 on node 0/RSP0/CPU0 Successfully set config-register to 0x0 on node 0/RSP1/CPU0Next, reload both RSPs using the reload location all command. The RSPs will be in ROMMON after reloading.RP/0/RSP0/CPU0:ios#admin reload location all Sat Nov 18 02:51:58.151 UTCPreparing system for backup. This may take a few minutes especially for large configurations. Status report: node0_RSP0_CPU0: START TO BACKUP Status report: node0_RSP0_CPU0: BACKUP HAS COMPLETED SUCCESSFULLY [Done] Proceed with reload? [confirm] RP/0/RSP0/CPU0::This node received reload command. Reloading in 5 secsAll RSPs will reboot with a ROMMON prompt. System Bootstrap, Version 0.76 [ASR9K x86 ROMMON], Copyright (c) 1994-2012 by Cisco Systems, Inc. Compiled on Mon 05/23/2016 20:19:29.12 by myekkarRommon : 0.76 Ibex Peak : 6 Jasper Forest: 1.0 Zen-JF : 0.7.92 CBC0 : Part 1=16.116, Part 2=16.115, Act Part=1 Laguna : 0.11.0 (primary) Dao : 1.10.0 (primary) UTI : 4.9 (primary) Timex : 0.1.1 (primary) Board : 4 ========================================================== rommon 1 &amp;gt;Next, set ROMMON variables on one of the RSPs to match your environment as follows: IP_ADDRESS – The IP address of your RSP’s management port. IP_SUBNET_MASK – The subnet mask of the RSP’s management port. DEFAULT_GATEWAY – The default gateway of the RSP’s management port. TFTP_SERVER – The IP address of the TFTP server containing your mini-vm turboboot image. TURBOBOOT – Set this to “on,disk0,clean” to enable turbobooting and completely clean the disk0: storage device.Unset the BOOT statement using the unset BOOT command, then sync all changed boot variables using the sync command. Lastly, boot the mini-vm turboboot image using the boot tftp://tftp_ip_address/turboboot_image command.These steps are demonstrated below: rommon 4 &amp;gt; IP_ADDRESS=192.0.2.25 rommon 5 &amp;gt; IP_SUBNET_MASK=255.255.255.0 rommon 6 &amp;gt; DEFAULT_GATEWAY=192.0.2.1 rommon 7 &amp;gt; TFTP_SERVER=192.0.2.10 rommon 8 &amp;gt; TURBOBOOT=on,disk0,clean rommon 9 &amp;gt; unset BOOT rommon 10 &amp;gt; sync rommon 11 &amp;gt; boot tftp://192.0.2.10/asr9k-mini-px.vm-6.0.2The RSP will proceed to turboboot into the specified software version.Beginning TFTP boot: TFTP server specified is: TFTP filename specified is: asr9k-mini-px.vm-6.0.2 Selecting MGMT LAN 0 interface.IP_ADDRESS: 192.0.2.25 IP_SUBNET_MASK: 255.255.255.0 DEFAULT_GATEWAY: 192.0.2.1 TFTP_SERVER: 192.0.2.10 TFTP_FILE: asr9k-mini-px.vm-6.0.2 TFTP_MACADDR: 84:78:ac:75:1a:58 TFTP_VERBOSE: Progress TFTP_RETRY_COUNT: 18 TFTP_TIMEOUT: 7200 TFTP_CHECKSUM: Yes ETHER_PORT: 3 ETHER_SPEED_MODE: Auto Detect TFTP attempt 1 of 1 GigE link up, waiting for ARP reply ... Receiving asr9k-mini-px.vm-6.0.2 fromile reception completed.After some time, the turbobooting RSP will reset the TURBOBOOT ROMMON variable, reset the configuration register to 0x2, and indicate an impending reload in 30 seconds. This is demonstrated below.Nov 20 22:09:19.759 : TURBOBOOT: Package copy operation is complete. Install operation 1 completed successfully at 22:09:19 UTC Mon Nov 20 2017. Nov 20 22:09:19.887 : TURBOBOOT: All node preparations complete: Node 0/RSP0/CPU0 successfully completed the preparation. Node 0/0/CPU0 successfully completed the preparation.Nov 20 22:09:19.894 : TURBOBOOT: Resetting TURBOBOOT rommon variable to (TURBOBOOT=). Nov 20 22:09:21.470 : TURBOBOOT: Setting config-register to autoboot the router and disable send break. Nov 20 22:09:21.492 : TURBOBOOT: Turboboot completed successfully: the router will now reload from diskNov 20 22:09:21.492 : TURBOBOOT: *** RESETTING IN 30 SECONDS ***The RSP will then reload, then boot into the desired IOS XR software version. Once the RSP has fully loaded into IOS XR and all other line cards (with the exception of the standby RSP) are in either IOS XR RUN, READY, or OK, the standby RSP must be brought online under the new version as well. This can be done by setting the configuration register to 0x2 in ROMMON, syncing the boot variable changes, and resetting the RSP as shown below. rommon 1 &amp;gt; unset BOOT rommon 2 &amp;gt; confreg 0x2nv_wr_confreg:val=0x2. writing 0x2 to confreg. You must reset or power cycle for new the new confreg value to take effect rommon 3 &amp;gt; sync rommon 4 &amp;gt; resetThe standby RSP will synchronize software packages with the active RSP, then boot into the desired IOS XR software version normally.You can confirm that you have successfully turbobooted the chassis if the show install active summary command reveals that only the mini PIE is active, and if the admin show platform command reveals that all cards are in either IOS XR RUN, READY, or OK status.RP/0/RSP0/CPU0:ios#show install active summary Mon Nov 20 23:10:08.378 UTC Default Profile: SDRs: Owner Active Packages: disk0:asr9k-mini-px-6.0.2RP/0/RSP0/CPU0:ios#admin show platf Mon Nov 20 23:09:31.157 UTC Node Type State Config State ----------------------------------------------------------------------------- 0/RSP0/CPU0 A9K-RSP440-TR(Active) IOS XR RUN PWR,NSHUT,MON 0/RSP1/CPU0 A9K-RSP440-TR(Standby) IOS XR RUN PWR,NSHUT,MON 0/FT0/SP ASR-9006-FAN READY 0/FT1/SP ASR-9006-FAN READY 0/0/CPU0 A9K-MOD160-SE IOS XR RUN PWR,NSHUT,MON 0/0/0 A9K-MPA-8X10GE OK PWR,NSHUT,MON 0/0/1 A9K-MPA-20X1GE OK PWR,NSHUT,MON 0/1/CPU0 A9K-VSM-500 UNPOWERED NPWR,NSHUT,MON 0/3/CPU0 A9K-VSM-500 UNPOWERED NPWR,NSHUT,MON 0/PS0/M0/SP PWR-3KW-AC-V2 READY PWR,NSHUT,MON 0/PS0/M1/SP PWR-3KW-AC-V2 READY PWR,NSHUT,MON 0/PS0/M2/SP PWR-3KW-AC-V2 READY PWR,NSHUT,MON 0/PS0/M3/SP PWR-3KW-AC-V2 READY PWR,NSHUT,MONIOS XR Software Upgrade/Downgrade Caveats All IOS XR software versions prior to 5.3.1 require the CSCut52232 SMU in order for additional SMUs to be installed. 5.3.1 and later are not affected by this defect and do not require the CSCut52232 SMU. The tar file filename for this SMU on CCO is asr9k-px-5.1.2.CSCut52232.tar. In some instances, you may have to manually install the root certificate contained within the CSCut52232 SMU .tar file before installing the CSCut52232 SMU itself.ConclusionAt this point, an individual who was previously unfamiliar with IOS XR software should be able to change the software version of an IOS XR device. Furthermore, if an IOS XR device is unstable due to software packages, or needs to undergo a drastic upgrade or downgrade, an individual should be able to successfully turboboot an IOS XR chassis.I hope that you found this helpful or educational!" }, { "title": "Auto-MDIX Capabilities on Cisco 1800s, 2800s, and 3800s", "url": "/Auto-MDIX-Capabilities-On-Cisco-1800s-2800s-and-3800s/", "categories": "", "tags": "", "date": "2017-11-26 00:00:00 -0500", "snippet": "A common question I have seen asked is what models of Cisco 1800s, 2800s, and 3800s support auto-MDIX, a feature that allows for Ethernet cables with almost any pinout to connect devices together. This question has become prevalent now that these devices are becoming more affordable on the used Cisco market, making them especially prominent in home or business lab environments. I have personally tested all of the below devices to verify the presence or absence of auto-MDIX. Model Auto-MDIX CISCO1801 Yes CISCO1802 Yes CISCO1803 Yes CISCO1811 Yes CISCO1812 Yes CISCO1841 No C1861 Yes CISCO2801 No CISCO2811 Yes CISCO2821 Yes* CISCO2851 Yes* CISCO3825 Yes* CISCO3845 Yes* *These devices have Gigabit Ethernet interfaces, which support auto-MDIX by default according to IEEE 802.3-2012, section 40.8.2Testing ProcedureThe testing procedure for each of these devices was fairly straightforward. I created a loopback by inserting a crossover Ethernet cable into both onboard interfaces of each device (for example, Fa0/0 and Fa0/1). I would verify that both interfaces are functional and come up/up by issuing a no shutdown command. Then, I would replace the crossover Ethernet cable with a straight-through Ethernet cable. If the interfaces were functional and came up/up, then the device supported auto-MDIX. If the interfaces remained offline in a down/down state, then the device did not support auto-MDIX.In some instances, such as the CISCO1801 and the C1861, the device only had a single onboard Ethernet interface. In these cases, I repeated the test using another device that does not support auto-MDIX, such as a CISCO1841. In order for two devices of similar type (for example, two routers) to connect interfaces via a straight-through cable, only one device in the pair needs to support auto-MDIX. Therefore, I would verify the interfaces on both devices were working using a crossover Ethernet cable, then switch to a straight-through Ethernet cable. If the link came online, then through the power of elimination, the device under test is confirmed to support auto-MDIX. If the link did not come online with a straight-through Ethernet cable, then neither device supported auto-MDIX.Hopefully this helps quell some confusion regarding auto-MDIX support on these models!" }, { "title": "Cisco TCL Script Not Running Configure Replace", "url": "/Cisco-TCL-Script-Not-Running-Configure-Replace/", "categories": "", "tags": "", "date": "2017-08-08 00:00:00 -0400", "snippet": "During the research phase of my networking homelab initial configuration automation article, I explored many different options on how to easily deploy a base configuration to devices that had been reset to factory defaults. One of the options I tested involved TCL scripts, where a script would reset the device to factory settings, then use the configure replace command to introduce a predefined configuration. This configuration would establish remote access, define IP addressing across management interfaces, create usernames and passwords, and implement any other convenient commands for the user. The configure replace command worked extraordinarily well: SSH could be used for remote access because cryptographic keys could be loaded into the base configuration, there was no need to reload any devices in order to revert to the base configuration, and a previous Telnet or SSH session would not be interrupted at all when the configure replace command is run.I chose not to use the configure replace command for a number of reasons, but one of them was the fact that Cisco devices do not support the configure replace command when executed via the TCL shell. After many hours of testing and research, I discovered this lack of support through internal Cisco documentation. This article will illustrate this topic so that if others encounter similar issues, they will be made aware that this functionality is not supported. I will demonstrate this by showing how configure replace should work normally, then show what happens when executed via the TCL shell.For this example, I have a Cisco 1841 router running IOS 15.1(4)M12A, which is the recommended software release on Cisco’s support site as of this date. A test-config file on the 1841’s flash contains a configuration that is automatically generated by the router, with the only difference being a change of hostname from Router to Test. As shown below, when the configure replace flash:test-config is run, the hostname instantly changes:Router#configure replace flash:test-configThis will apply all necessary additions and deletionsto replace the current running configuration with thecontents of the specified configuration file, which isassumed to be a complete configuration, not a partialconfiguration. Enter Y if you are sure you want to proceed. ? [no]: yesTotal number of passes: 1Rollback DoneTest#Next, let’s revert back to our previous configuration and test using the TCL shell. Enter the TCL shell and attempt to run the same configure replace command using the exec function:Router(tcl)#exec &quot;configure replace flash:test-config&quot;% Configuration not allowed from TCL shell.Use &#39;ios_config&#39; insteadThis error message is a bit confusing, as the exec function in TCL is normally used to execute commands that are run in privileged EXEC mode of the router, while the ios_config function is normally used to execute commands that are run in global configuration mode. Let’s follow the TCL shell’s instructions and try to run the command using ios_config:Router(tcl)#ios_config &quot;configure replace flash:test-config&quot;Router(tcl)#Jan 2 13:06:58.083: %SYS-5-CONFIG_I: Configured from console by vty0Router(tcl)#The command appears to have worked; we even have a syslog message suggesting that the device has been configured through a VTY line (which is used when commands are run through the TCL shell.) However, we do not see the hostname of the router change, which would have happened if the configuration was actually replaced.When the configure replace command is executed in the privileged EXEC mode, it is an interactive command that requires user input and confirmation. It could be argued that the command fails because the TCL shell is waiting for the user to type “yes” to confirm the configuration replacement. We can bypass the user input by using the configure replace flash:test-config force command to rule out this argument:Router#configure replace flash:test-config forceTotal number of passes: 1Rollback DoneTest#Test#configure terminalTest(config)#hostname RouterRouter(config)#endRouter#tclshRouter(tcl)#exec &quot;configure replace flash:test-config force&quot;% Configuration not allowed from TCL shell.Use &#39;ios_config&#39; insteadRouter(tcl)#ios_config &quot;configure replace flash;test-config force&quot;Router(tcl)#Jan 2 13:12:21.599: %SYS-5-CONFIG_I: Configured from console by vty0Router(tcl)#After doing some research internally, I found documentation that indicates using the configure replace command from the TCL shell (whether it be directly through the shell, or by executing a TCL script) is not a supported feature in any version of IOS. The error message that is output by the TCl shell when the exec function is used to execute the configure replace command is indicative of this, as the configure replace command is run in privileged EXEC mode, but the underlying function runs commands that need the permissions of global configuration mode (which can only be executed by the ios_config function.)" }, { "title": "Automating Base Configuration in a Cisco Networking Homelab", "url": "/Automating-Base-Configuration-In-A-Cisco-Networking-Homelab/", "categories": "", "tags": "", "date": "2017-08-08 00:00:00 -0400", "snippet": "Let’s face it: resetting Cisco devices in your homelab to factory defaults is painful. The process of plugging in a console cable, erasing the contents of the NVRAM, reloading the device, then initially configuring the device so that you can remotely access it is bearable for a single device, but most networking homelabs have six devices, sometimes more! Modern Cisco devices solve this issue with dedicated management interfaces that retain their configuration even after a write erase command, but these devices tend to be outside the budget of somebody studying for their CCNA or CCNP. One common solution is a router acting as a terminal server, which uses reverse telnet to remotely console into devices using the console or aux ports; however, the total cost of such a project easily can be hundreds of dollars and can be difficult for somebody new to Cisco devices to configure.Cisco’s AutoInstall feature provides a convenient automation solution to this issue while minimizing expensive hardware purchases. By configuring a device connected to our homelab to act as a TFTP and DHCP server, we can automatically push an initial configuration to each of our Cisco devices that have been remotely reset to factory settings. This service automatically provides remote access, AAA configuration, and much more to our devices after resetting them!RequirementsAccording to Cisco’s Feature Navigator, Cisco introduced AutoInstall in IOS Release 12.1(5)T, which was released in the early 2000s and reached end-of-support in 2013. This means that the vast majority of Cisco devices on the used market should be running 12.1 or higher. As an example, the oldest image available for download from Cisco for the very-popular CISCO1841 router is 12.3(8)YG4, and I have confirmed that Cisco AutoInstall is supported at this version with IP Base licensing.Another feature we’re going to utilize is TCL, which we will use to write configurations to a file. Support for TCL was introduced in 12.2(33)IRA, which is still old enough that compatibility should not be an issue for the vast majority of networking pods.If you’re going to be using a Cisco device to serve as your DHCP and TFTP server, you will need to ensure that the device is capable of running at least IOS 12.2(33)SRA or greater. This software is the earliest release where both DHCP pools and TFTP server configuration is supported.The base configurations that I will be creating are designed to provide remote access to a device by bringing up an interface, assigning an IP address to it, creating a new user with a password, creating a secret password, and requiring users to log into the device when accessed through VTY lines. This configuration works well with the topology below, where every device in the pod is connected via Ethernet to a management switch reachable at 192.168.0.1. In our topology, the management switch (a Catalyst 3560) will be providing management connectivity to all devices in the pod, as well as serving as our DHCP and TFTP server.Your topology could replace the management switch with a dumb switch and have a host (such as a Raspberry Pi) connected to it, which would serve as your DHCP and TFTP server. The details do not matter – the end goal of this topology is that each device dedicates a single Ethernet interface for a management network, and the rest of the interfaces can be used for practicing configuration as you normally would in a lab. You remotely access all of the devices in your lab via Telnet, and when you finish with your lab and wish to erase your work, you simply reset each device to factory settings via a write erase command and a reload. When the device boots up, it will automatically pull your base configuration from the TFTP server. Your base configuration can contain whatever configuration best suits your needs: The goal of this article is to show you an example of what can be automated in your pod without the need for moving a console cable from device to device.TestingI attempted to utilize equipment that likely would be found in a CCNA or CCNP certification homelab wherever possible. However, my testing is not comprehensive; it is entirely possible that you may encounter issues with your equipment due to the multiple different combinations of Cisco hardware and software that are available. Management Switch WS-C3560X-24P-L running 15.2(3)E Router Clients CISCO1841 running 15.1(4)M12A C2620XM-1FE running 12.4(25d) C1861E-SRST-F/K9 running 15.2(4)M3 Switch Client WS-C3560X-24P-L running 15.2(3)E If you encounter issues with configuring AutoInstall on your equipment, I highly recommend updating to the latest recommended version of code, if at all possible. If that is not a feasible option, feel free to contact me with your software, hardware, and configurations! I would be more than happy to review your setup and point out any issues I can find.ProcedureOur first step is going to be configuring our management switch to act as a DHCP server. Again, any switch can be used (whether it be a smart/managed switch or a dumb switch), so long as all devices are plugged into the switch, and the device that serves as your TFTP and DHCP server is plugged into the switch too. The following procedure assumes that you are using a Cisco device to provide TFTP and DHCP services to your networking pod.First, let’s configure DHCP on our switch by creating a pool named LAB-DHCP, setting the scope of the pool to 192.168.0.0/24, setting our default router to 192.168.0.1, setting the TFTP server IP address option (150) of our DHCP pool to point to 192.168.0.1, and excluding the switch’s own IP (192.168.0.1) from the DHCP pool. Then, we’re going to assign 192.168.0.1/24 to our Vlan 1 interface.Management#configure terminalManagement(config)#ip dhcp pool LAB-DHCPManagement(dhcp-config)#network 192.168.0.0 255.255.255.0Management(dhcp-config)#default-router 192.168.0.1Management(dhcp-config)#option 150 ip 192.168.0.1Management(dhcp-config)#exitManagement(config)#ip dhcp excluded-address 192.168.0.1Management(config)#interface Vlan1Management(config-if)#ip address 192.168.0.1 255.255.255.0Management(config-if)#no shutManagement(config-if)#endAt this point, if you go to another device in your topology and configure ip address dhcp on your interface facing the management switch, you should be able to obtain an IP address in the 192.168.0.0/24 range.Before we configure our management switch to act as a TFTP server, we need to create the base configuration to be used across all our devices. The reasoning behind this is that in order to configure a device as a TFTP server in Cisco IOS, we need to choose individual files that we wish to be accessed via TFTP. As of right now, we don’t have a file that we can serve via TFTP.To create our base configuration, we’re going to be using the TCL shell on our management switch to write commands to a file. This option is better than copying a base configuration from one of our devices, as our networking pod may have a mixture of device models, images, and types. A base configuration derived from one of those devices may cause configuration errors on other devices if interface names, image versions, or capabilities are different. When we create our configuration, we’re going to want to make sure we name it network-confg, as AutoInstall requires base configurations to be named either network-confg or cisconet.cfg.We can access the TCL shell from privileged EXEC mode by typing the tclsh command; you should see your prompt change from Hostname# to Hostname(tcl)#, which indicates a successful transition. From this point forward, you want to tailor your base configuration to your specific needs; as I described above, my base configuration is only going to contain the necessary configuration to establish telnet connection from the management switch using a username, password, and secret of “cisco”. My commands in the TCL shell, as well as my base configuration are shown below – feel free to customize it to fit your environment.Management(tcl)#puts [ open &quot;flash:network-confg&quot; w+ ] {+&amp;gt;hostname BASE-CONFIG+&amp;gt;enable secret cisco+&amp;gt;ip domain name chrisjhart.com+&amp;gt;username cisco password cisco+&amp;gt;line vty 0 4+&amp;gt; logging synchronous+&amp;gt; login local+&amp;gt; transport input all+&amp;gt;line vty 5 15+&amp;gt; logging synchronous+&amp;gt; login local+&amp;gt; transport input all+&amp;gt;end+&amp;gt;}Management(tcl)#tclquitManagement#We can confirm that our file wrote correctly by using the more command, which will output the contents of a file, as shown below:Management#more flash:base-confghostname BASE-CONFIGenable secret ciscoip domain name chrisjhart.comusername cisco password ciscoline vty 0 4 logging synchronous login local transport input allline vty 5 15 logging synchronous login local transport input allendManagement#Finally, let’s enable the TFTP server on our management switch…Management#configure terminalManagement(config)#tftp-server flash:network-confg…and confirm that R1 is able to copy the file from the management switch!BASE-CONFIG#copy tftp://192.168.0.1/network-confg flash:testDestination filename [test]?Accessing tftp://192.168.0.1/network-confg...Loading network-confg from 192.168.0.1 (via FastEthernet0/1): ![OK - 3134 bytes]3134 bytes copied in 0.543 secs (5772 bytes/sec)Now let’s confirm that AutoInstall is functioning by resetting R1 to factory defaults. After we reload R1, it should automatically pull the base configuration from our management switch:BASE-CONFIG#write eraseErasing the nvram filesystem will remove all configuration files! Continue? [confirm][OK]Erase of nvram: complete*Jul 24 22:42:26.040: %SYS-7-NV_BLOCK_INIT: Initialized the geometry of nvramBASE-CONFIG#BASE-CONFIG#BASE-CONFIG#reloadSystem configuration has been modified. Save? [yes/no]: noProceed with reload? [confirm]*Jul 24 22:42:32.377: %SYS-5-RELOAD: Reload requested by console. Reload Reason: Reload Command.&amp;lt;snip&amp;gt;--- System Configuration Dialog ---Would you like to enter the initial configuration dialog? [yes/no]:Loading network-confg from 192.168.0.1 (via FastEthernet0/1): ![OK - 1101 bytes]%Error opening tftp://192.168.0.1/BASE-CONFIG-confg (Socket error)%Error opening tftp://192.168.0.1/BASE-CONFIG-confg (Socket error)%Error opening tftp://192.168.0.1/BASE-CONFIG-confg (Socket error)%Error opening tftp://255.255.255.255/BASE-CONFIG-confg (Socket error)%Error opening tftp://255.255.255.255/BASE-CONFIG-confg (Socket error)%Error opening tftp://255.255.255.255/BASE-CONFIG-confg (Socket error)Would you like to enter the initial configuration dialog? [yes/no]: noPress RETURN to get started!BASE-CONFIG&amp;gt;BASE-CONFIG&amp;gt;Success! However, we still have room for improvement; in its current shape, AutoInstall will result in all of our pod devices having the same hostname, and IP addresses will be assigned randomly. This will make remote management a bit more difficult, as we’ll need to find out which IP address each of our devices grabbed before being able to telnet into them. Let’s customize our configuration on R1 a little bit more by creating a file named R1-confg on the management switch using TCL:Management(tcl)#puts [ open &quot;flash:R1-confg&quot; w+ ] {+&amp;gt;interface FastEthernet0/1+&amp;gt; ip address 192.168.0.10 255.255.255.0+&amp;gt; no shutdown+&amp;gt;line vty 0 15+&amp;gt; login local+&amp;gt; transport input all+&amp;gt;username cisco password cisco+&amp;gt;enable secret cisco+&amp;gt;hostname R1+&amp;gt;}Management(tcl)#tclquitManagement#Next, let’s configure our TFTP server to serve the R1-confg file:Management#tftp-server flash:R1-confgThe naming scheme of this configuration file (along with all of your future, device-specific configuration files) is important. Cisco AutoInstall follows the naming scheme hostname-confg or hostname.cfg, where hostname is the hostname that you choose to give to your device. Therefore, if you want a device named “AggSw” to install a host-specific configuration automatically, you need to name that configuration file AggSw-confg on your TFTP server.However, we must first answer an important question: how does our DHCP/TFTP server know which host-specific configuration goes with which device?The answer is through configuring manual bindings in a DHCP pool for each individual host. In order to do this, we need to find the client identifier for each host. The easiest way to do this is to allow each device to load its base configuration from the management switch (which involves grabbing an IP address from the DHCP server), then use the show ip dhcp binding command to find the client identifier, as shown highlighted below in bold:Management#show ip dhcp bindingBindings from all pools not associated with VRF:IP address Client-ID/ Lease expiration Type State Interface Hardware address/ User name192.168.0.10 0063.6973.636f.2d30. Infinite Manual Active Unknown 3031.352e.3262.6433. 2e35.6166.372d.4661. 302f.31192.168.0.11 0063.6973.636f.2d66. Infinite Manual Active Unknown 3836.362e.6632.3262. 2e32.6463.302d.566c. 31Once you’ve found the client-identifier for your device, you can set up a DHCP pool for that specific device. When configuring manual bindings for devices, each device requires its own specific DHCP pool. This is demonstrated below:Management#show run ip dhcp pool!ip dhcp pool R1 host 192.168.0.10 255.255.255.0 client-identifier 0063.6973.636f.2d30.3031.352e.3262.6433.2e35.6166.372d.4661.302f.31 bootfile R1-confg default-router 192.168.0.1 option 150 ip 192.168.0.1!ip dhcp pool S1 host 192.168.0.11 255.255.255.0 client-identifier 0063.6973.636f.2d66.3836.362e.6632.3262.2e32.6463.302d.566c.31 bootfile S1-confg default-router 192.168.0.1 option 150 ip 192.168.0.1Each pool identifies: The IP address that the host should have The client identifier that belongs to the host The configuration file that should be served to the host The host’s default gateway (typically the IP address of the management switch) The IP address of the TFTP server, so that the client knows from which TFTP server to pull the configured bootfile from.Now that we have our configuration in place, let’s factory reset R1 and see if it pulls a configuration!BASE-CONFIG#wr erErasing the nvram filesystem will remove all configuration files! Continue? [confirm][OK]Erase of nvram: completeBASE-CONFIG#reloadSystem configuration has been modified. Save? [yes/no]: noProceed with reload? [confirm]Jan 2 12:48:59.227: %SYS-5-RELOAD: Reload requested by console. Reload Reason: Reload Command.&amp;lt;snip&amp;gt;Cisco 1841 (revision 5.0) with 237568K/24576K bytes of memory.Processor board ID FTX0937Y0JV2 FastEthernet interfacesDRAM configuration is 64 bits wide with parity disabled.191K bytes of NVRAM.254464K bytes of ATA CompactFlash (Read/Write)Loading R1-confg from 192.168.0.1 (via FastEthernet0/1): ![OK - 191 bytes]%Error opening tftp://255.255.255.255/network-confg (Timed out)%Error opening tftp://255.255.255.255/cisconet.cfg (Timed out)--- System Configuration Dialog ---Would you like to enter the initial configuration dialog? [yes/no]:As you can see below, we are able to ping 192.168.0.10 (which was statically assigned to Fa0/1 of R1), as well as telnet into 192.168.0.10 successfully!Management#ping 192.168.0.10 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 192.168.0.10, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 1/4/9 msManagement#telnet 192.168.0.10Trying 192.168.0.10 ... OpenUser Access VerificationUsername: ciscoPassword:R1&amp;gt;enablePassword:R1#show ip int br | i upFastEthernet0/1 192.168.0.10 YES DHCP up upConclusionWe are now able to create a custom configuration for each of the devices in our networking homelab, and we have confirmed that we are able to remotely configure a device, reset it to factory settings when we’re done with our lab for the day, and connect to it remotely once more after the factory-reset process is complete. This is demonstrated below, where I was able to telnet into a Cisco1841 router, factory reset and reload the device, then remotely access it once more after about 2.5 minutes:Management#telnet 192.168.0.10Trying 192.168.0.10 ... OpenUser Access VerificationUsername: ciscoPassword:R1&amp;gt;enablePassword:R1#wr erErasing the nvram filesystem will remove all configuration files! Continue? [confirm][OK]Erase of nvram: completeR1#reloadSystem configuration has been modified. Save? [yes/no]: noProceed with reload? [confirm][Connection to 192.168.0.10 closed by foreign host]Management#Mar 30 15:12:29.904: %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to downMar 30 15:12:31.909: %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to upMar 30 15:13:47.692: %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to downMar 30 15:13:48.690: %LINK-3-UPDOWN: Interface GigabitEthernet0/1, changed state to downMar 30 15:13:50.813: %LINK-3-UPDOWN: Interface GigabitEthernet0/1, changed state to upMar 30 15:13:51.819: %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to upMar 30 15:13:59.772: %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to downMar 30 15:14:01.802: %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to upManagement#telnet 192.168.0.10Trying 192.168.0.10 ... OpenUser Access VerificationUsername: ciscoPassword:R1&amp;gt;enablePassword:R1#show inventoryNAME: &quot;chassis&quot;, DESCR: &quot;1841 chassis&quot;PID: CISCO1841 , VID: V01 , SN: FTX0937Y0JVNAME: &quot;motherboard&quot;, DESCR: &quot;C1841 Motherboard with 2 Fast Ethernet&quot;PID: CISCO1841 , VID: V01 , SN: FOC09330G2KThe possibilities in the homelab are endless with automation leveraged by Cisco AutoInstall. I hope this guide was helpful!" }, { "title": "Configuring SuperPuTTY to open web browser telnet hyperlinks", "url": "/Configuring-SuperPuTTY-To-Open-Telnet-Hyperlinks/", "categories": "", "tags": "", "date": "2017-05-25 00:00:00 -0400", "snippet": "I recently installed SuperPuTTY and spent more time than I should have configuring it so that telnet hyperlinks (such as telnet://10.0.0.1) will automatically open a SuperPuTTY tab. This guide seeks to assist others with similar desires.First, ensure that both SuperPuTTY and PuTTY are installed and configured correctly. Your SuperPuTTY options should be configure similar to mine such that SuperPuTTY knows where the PuTTY executable file is located:If you want SuperPuTTY to open a new tab for each individual PuTTY session, make sure you check the “Only allow single instance of SuperPuTTY to run” option in the “Advanced” tab of SuperPuTTY’s options:Be sure to test both programs to ensure they’re working properly by opening a new session to a device in SuperPuTTY:Next, we need to modify a registry setting within Windows. This registry setting is non-disruptive (meaning, you will not need to restart Windows in order for any changes to this registry setting to take affect.) The registry key is located at HKEY_CLASSES_ROOT\\telnet\\shell\\open\\command, and you will need to modify the (Default) key so that it points to the location of your SuperPuTTY executable. However, note that you will need to append an %1 to the end of the filepath, with a space between the filepath and %1. For example, my registry key reads:C:\\Program Files (x86)\\SuperPuTTY\\superputty.exe %1The picture below should alleviate any confusion you may still have:You can easily test whether or not telnet hyperlinks are working using this hyperlink, which leads to the alt.org public Nethack server!" }, { "title": "Cisco Nexus 7700 – Line card’s Status LED flashing red instantly on insertion", "url": "/Nexus-7700-Line-Card-Status-LED-Flashing-Red/", "categories": "", "tags": "", "date": "2017-05-16 00:00:00 -0400", "snippet": "A few weeks ago, a coworker of mine asked for my assistance with an odd Nexus 7700 issue. He brought me over to an N77-C7702, where I found a SUP2E humming along while an N77-F348XP-23 line card sat above it. The line card’s Status LED was blinking red, indicating its unhappiness with the current situation.I consoled into the device, where a show module command revealed that the supervisor did not detect anything inserted into the chassis’s only slot. A quick re-seat of the line card resulted in the line card’s Status LED instantly switching back to a flashing red, with no change in the output of the show module command and not even so much as a message in the log. I checked the usual suspects, confirming that the software version and supervisor are compatible with the line card, verifying that the chassis had enough available power to power on the module, and inspecting the card for any obvious physical damage. I also modified the boot statement to reload into a newer version of software, just in case we were running into an odd bug on that particular software version. Everything checked out, so we were beginning to suspect the line card.We removed the line card and found an F2 card to try instead. Much to our dismay, it gave us the exact same issue: a flashing red Status LED instantly on insertion. We also inserted the original F3 line card into another chassis, and it powered on without an issue. Thanks to the process of elimination, this instantly pointed the finger at one of two things: either there was an issue with the chassis, or there was an issue with the supervisor. Unfortunately, we didn’t have another chassis to test the issue with, but we did have another SUP2E. We swapped out the supervisors, and shortly after the supervisor finished booting, the module came online!At that point, my coworker was convinced we had a faulty supervisor, but I remained skeptical. Something just didn’t seem right; the supervisor was able to boot up without reporting any critical errors, had no issues accepting any configuration, but wasn’t able to power on any module?While absentmindedly staring at the console while the supervisor was booting, I noticed the following error message scroll by:&amp;lt;&amp;lt;%PLATFORM-1-PFM_ALERT&amp;gt;&amp;gt; Incompatible Sup FPGA(13), upgrade FPGA &amp;gt;= 0x14“Now that is unusual”, I thought to myself. A Google search led me to the Cisco Nexus 7000 NX-OS 7.2 release notes, which contained the following statement: All supervisor 2E modules shipped with the Nexus 7702 switch will be shipped with FPGA version 1.4. If you install a spare Supervisor 2E module on the Nexus 7702 switch you must upgrade the FPGA version to 1.4. In such a situation you will be notified with alert: “«%PLATFORM-1-PFM_ALERT» Incompatible Sup FPGA(12), upgrade FPGA &amp;gt;= 0x14 “. After doing a bit more research as to what exactly an FPGA is (as well as what an EPLD is, as the two are closely related) I determined that outdated FPGA firmware was likely causing the issues we had been experiencing. I followed the procedure highlighted in the FPGA/EPLD upgrade release notes, and about fifteen minutes later, the original F3 line card had powered on without an issue!A mentor of mine once said that one of the beautiful aspects of Cisco’s Nexus devices is that they will always tell you exactly why something is not working somewhere; the trick is finding out where!" }, { "title": "A Homelab Update!", "url": "/Homelab-Update/", "categories": "", "tags": "", "date": "2017-04-02 00:00:00 -0400", "snippet": "A lot has changed with my homelab since my first post, and unfortunately, my website has remained devoid of any updates. That is definitely going to change during 2017! To start off, let’s take a look at the latest lab topology, then I’ll explain what has changed since the previous update and my rationale behind certain decisions.First, I’ll talk about things from a networking point of view. My TP-Link routers and switches have been replaced with a Cisco 3825 router and a Cisco 3750G (specifically, a WS-C3750G-24T-S, or for those who don’t speak Cisco model numbers, a 24-port gigabit L3 switch). I have also purchased an Ubiquiti UniFi AP AC Lite to serve as my access point. My “production” network and my lab network are no longer segregated the way they used to be, as I felt comfortable enough with Cisco devices and my own technical abilities to merge the two together. The introduction of the Cisco switch and router allowed me to introduce VLANs to the network.Initially, I went a little bit overboard with VLANs. I introduced a “primary clients” VLAN, a wireless VLAN, a guest wireless VLAN, a “devices” VLAN (which I primarily put my printer on), a services VLAN, a management VLAN, a monitoring VLAN, a DMZ VLAN, and a VLAN for a test PowerShell environment. Each VLAN received its own /24 network, which was subnetted from a 10.0.0.0/8. After realizing that some VLANs were not being used, were unnecessary, and were complicating my IP addressing scheme, I recently consolidated down to 5 VLANs, 4 of which are displayed in the topology. VLAN 10 – designated for “clients”, which include all wired and wireless devices (printer included). VLAN 15 – designated for guest wireless traffic, tagged at the Ubiquiti AP. VLAN 20 – designated for management (primarily of the router/switch, VCSA, my ESXi host, and the iDRAC of my server). VLAN 30 – designated for services (effectively merging the services and monitoring VLANs). VLAN 40 – designated as the DMZ, which is segregated from the rest of the network via an ACL on the router.Each of these VLANs is still given its own /24, but is being subnet from 192.168.0.0/16, with the third octet of the IP address designating the VLAN it belongs to. For example, devices on VLAN 10 live on the 192.168.10.0/24 network.DHCP and DNS are being served by the domain controllers on my network. DC01 and DC03 are configured for failover DHCP (which lets me reboot one of them to update without disturbing network services.) DC02 is not configured for DHCP; this is because DC01 and DC02 are virtualized, but DC03 is a physical machine (an old Toshiba Satellite humming along on my desk). My rationale for this decision was to ensure availability of network services should the ESXi host go down, whether it be due to a prolonged power outage or simply for maintenance.Moving onto the server hardware changes, you will notice that both the old PowerEdge 1950 and 2950 have been decommissioned. I finally grew weary of the noise and power consumption of the 1950 and purchased a shiny used PowerEdge R710. This R710 is equipped with two Intel Xeon L5640s (picked out with power consumption in mind), as well as 64GB of memory (a decent upgrade from my previous 32GB, which was beginning to fill up.) During the migration between the two servers, I decided to update my version of ESXi from 6.0 to 6.5.0, giving me access to the vSphere HTML5 client (which is very nice!)So far, I am enjoying the R710. I would not say that the server is necessarily quieter than the 1950, but the R710’s fans run at a lower pitch than the 1950’s fans, which effectively makes it sound a bit quieter. The power consumption is where the differences become massive; my entire homelab (router and switch included) runs at about 120W, whereas with the 1950 it would run anywhere from 300-350. This has put my noticeable dent in my monthly power bill, so I think the upgrade was well worth the money!Next, let’s take a look at the virtual machines. Compared to my last topology’s count of 6, it is clear that I have drastically increased the number of VMs I host (currently at 14 worth mentioning on the topology – I have a few others that are temporary or not noteworthy.) PLEX01 – I have virtualized my PLEX server and have it running under CentOS 7 – previously, APP01 was serving as my PLEX server in addition to a number of other functions, but I decided to move PLEX off of a Windows platform to alleviate some performance issues that I was encountering. So far, the only downside to hosting PLEX on Linux is that updating PLEX is not as easy as clicking a button; however, I believe that it would be fairly easy to script, so I plan on implementing that sometime Soon(TM). GNS01 – This is a VM I use to host all of my running router images on GNS3. This will come in especially handy as I approach my CCNP studies during this year. APP01 – This is a Server 2012 VM that runs a few little pieces of Windows-based software that are not resource-intensive, such as Progress Quest, another (legal) bot for a video game I play that is similar to Progress Quest, and qBitTorrent (which I plan on replacing with rTorrent on TRRNT01 Soon(TM)). PROXY01 – This is an HAProxy instance that functions as a reverse proxy, dividing incoming web traffic to different web servers depending on what website it’s headed to. HAProxy was recommended by a friend of mine for its ease of use, and it is incredibly powerful in addition to being easy-to-use. LEMP01-03 – These LEMP stacks host various external and internal websites. MON01 – This VM hosts Zabbix, which I use to monitor pretty much everything. For the most part, I use it to check up on how much bandwidth I’m using on my switch/router and help drill down what’s currently downloading something, but I intend on properly setting up triggers and alert notifications in the future. Zabbix is a bit of a beast to get configured properly, but it has proven to be extremely capable and flexible in its abilities. OWNCLOUD01 – This VM hosts OwnCloud, which I haven’t quite gotten working yet. I plan on using it to share files and such with third-parties, as well as serve as a central repository for software downloads for myself. MINE01 – This hosts a Minecraft server for myself, friends, and family to use every once in a while. I originally dabbled with using MineOS to accomplish this task, but it didn’t play very nicely with third-party mods, so I dumped it for CentOS in favor of more flexibility. TKT01 – I plan on setting this VM up with Request Tracker soon, which will be used as my to-do list for homelab and home automation tasks. Moving on to non-homelab topics, I recently changed jobs and now work at Cisco’s RTP campus as a co-op in the CALO labs! This has been an extraordinary opportunity, and I have learned an incredible amount. My goal when working in IT has always been to make sure that the present-time Chris believes that the Chris who was working a month ago is an idiot, and Cisco has absolutely provided that for me. I not only get the opportunity to work with extremely expensive equipment at a physical layer, but also have the chance to work with some of the best network engineers in the business!As you can imagine, Cisco pushes all of its technical employees to obtain network certifications, and co-ops are no different. We were encouraged to obtain our CCNA R&amp;amp;S by the end of June, and I am pleased to say that I obtained mine on March 20th! Next, I plan on working towards my CCNA Security before strengthening my routing/switching skills with a CCNP R&amp;amp;S.That’s all for now! With any luck, I’ll make enough progress and have enough time to post more updates within the next few days! As always, if you have any questions, comments, or suggestions, feel free to let me know!" }, { "title": "Schick Technologies USBCam2 Intraoral Camera Appears In Device Manager As USB2820 Device", "url": "/Schick-USBCam2-USB2820-Device/", "categories": "", "tags": "", "date": "2016-08-23 00:00:00 -0400", "snippet": "I’ve encountered an issue recently with a Schick Technologies USBCam2 intraoral camera appearing as a USB2820 device in Device Manager when plugged into a Dell Vostro 1520 laptop. I am not sure at this time if this is an issue between this particular laptop and the intraoral camera, or if this issue can occur with other laptop models as well. For me, this issue occurred regardless of which USB port the camera was plugged into. When the camera is acting under the USB2820 device, it does not display any video within dental practice management software or image capturing software (in this case, I was working with Eaglesoft.)I resolved this issue by changing how Windows searches for new device drivers. This can be done by searching for “View advanced system settings” in the Start menu, switching to the “Hardware” tab, then clicking on “Device Installation Settings”. In the window that appears, select the radio button for “No, let me choose what to do”, then select the radio button for either “Install driver software from Windows Update if it is not found on my computer” or “Never install driver software from Windows Update.” Then, click “Save Changes” and exit out of all dialog boxes. In my case, I needed to select the latter option to resolve the issue permanently, but your mileage may vary.Next, open up “Device Manager” by searching for it in the Start menu. The USB2820 device should be located under the “Sound, video and game controllers” submenu. Right-click on the USB2820 device, select “Uninstall”, then check the radio button for “Delete driver software” if it gives you the option to do so. Next, click the icon towards the top of the Device Manager window that says “Scan for hardware changes,” The Schick Technologies USBCam2 device should appear soon afterwards in the “Imaging devices” submenu. If you’re having trouble locating the “Scan for hardware changes” icon, you can also unplug the intraoral camera, then plug it back into the same USB port.If you plug the intraoral camera into a different USB port than previously, you may find that the USB2820 device will reappear. Repeating the process appears to resolve the issue for that specific USB port. Because of this, you may have to repeat this process for each USB port you plug the camera into – in my case, I had to do it four times, once for each USB port on the laptop.I’m not entirely sure what the root cause of this issue is, and am still searching for answers. If anybody has a better fix or an explanation for the cause, I would be happy to hear it!" }, { "title": "Installing/Reinstalling Windows 7 on a Dell Latitude E5570", "url": "/Installing-Windows-7-On-A-Dell-Latitude-E5570/", "categories": "", "tags": "", "date": "2016-08-23 00:00:00 -0400", "snippet": "I encountered an issue with a Dell Latitude E5570 where Windows 7 reported that the laptop’s BCD was either missing or corrupted. Upon attempting to rebuild the BCD using Windows 7 installation media, I received an odd error reporting that “The requested system device cannot be found”, even when it successfully detected the Windows installation of the laptop’s hard drive. I also noticed that in DISKPART, my installation media was not showing up as a disk (only the hard drive of the laptop appeared). At first, I believed that my USB 3.0 flash drive might be causing some issues, so I attempted to swap to USB 2.0 installation media – this did not help either.Finally, I opted to reinstall Windows 7 entirely. However, on both sets of installation media, my attempts to reinstall were met with a “A required CD/DVD drive device drivers is missing” error message. Swapping to another USB port on the laptop did not resolve this issue, as some forum users had suggested.After a bit more research, I finally found an article on Dell’s community wiki that described how to inject NVMe drivers into any Windows 7 installation media, which would allow you to install Windows 7 normally. These drivers are needed to install Windows 7 on any computer that has a Intel Skylake-generation processor. I followed this article and was successfully able to install Windows 7 on the laptop.I also attempted to load into the recovery environment using the installation media to see if I could rebuild the BCD of this laptop without having to completely reinstall, but I encountered the same issues as before. I believe that this is because the NVMe drivers that the WinPE environment needs in order to interact with the installation media further are not loaded until the Windows setup process begins. If anybody knows of a way to load these drivers manually through the command prompt, I would be very interested in hearing of a solution!Hopefully this information saves somebody else some time!" }, { "title": "Establishing A Baseline", "url": "/Establishing-A-Baseline/", "categories": "", "tags": "", "date": "2016-01-25 00:00:00 -0500", "snippet": "Lao Tzu, a Chinese philosopher, once said that “the journey of a thousand miles starts with a single step.” Although the journey of my homelab started over a year ago, it has remained largely undocumented. Blog posts like these (in combination with an internal wiki that I have set up) strive towards resolving that issue, as well as allowing others a glimpse into the infrastructure I have created and learn something from it (or, as is more likely, tell me that what I’m trying to do is very, very wrong.)To start off, I’d like to preface this post by saying that I have absolutely no idea what I am doing, and that I am fully aware of it. Part of the reason that I want to document the baby steps that I am taking is so that in the next few years, I can look back at where I started and realize exactly how far I have come. I will make incredibly stupid mistakes both large and small, and chances are very high that I will not realize that these mistakes exist until somebody else points them out.With that being said, let’s take a look at my lab’s current topology.Not pictured in this diagram is a Cisco 3825 router and a Cisco WS-3750-24T-S (24-port gigabit L3 managed switch), both of which I have recently purchased and will be configuring next week. I’m very excited about acquiring these guys off of eBay, as they’ll let me clean up my network quite a bit by eliminating both TP-Link routers, the TP-Link switch, and by allowing me to easily virtualize the PLEX server and repurpose the media server for something else (something that I have technically been able to do ever since I acquired the Amazon Fire TV around Christmas.) It will also be my first opportunity to extensively play around with VLANs, and it will give me experience with Cisco equipment that I can apply towards a certification sometime in the near future.The pfSense router virtual machine acts as a virtual router, separating the rest of the virtual machines from the TEST01 virtual machine. I am currently reading Learn Windows PowerShell in a Month of Lunches by Jeffery Hicks and Don Jones, which recommended following along with the book and completing lab exercises in a Server 2008 R2 environment configured as a primary domain controller. At the time, I was unsure what kind of configuration changes the book would have me practice, so I figured it would be best to work in an environment separate from the rest of the homelab. Placing the virtual machine behind a virtual router was a cheap and effective way to create this segregation.The Dell PowerEdge 2950 is not currently in use at the moment primarily because of the sheer amount of noise it produces within my apartment; I also don’t need it at the moment, as I’m not anywhere close to overloading the much-quieter PowerEdge 1950 just yet. I will most likely be using the 2950 to play around with Hyper-V in the future, which means it will be powered on and screaming only when I am actively using it. I originally planned to use it as the second half of an ESXi cluster in conjunction with the existing 1950 , but I think I will choose to purchase one or two R610 or R710s to fulfill that role.Speaking of, I should probably list the specific components of the 1950 (I won’t list the specs of the 2950, since I’m not entirely sure what’s in it and I don’t plan on using it anytime soon). It is a Dell PowerEdge 1950 Gen. II that was manufactured in late 2007, according to the service tag. It is equipped with the following: CPU: 2x Intel Xeon E5345 @ 2.33GHz Memory: 32GB DDR2 ECC Storage: 4x 500GB 7200RPM SATA hard drives configured in RAID10 via a PERC5/i RAID controller Network: 2x GbE network adapters Power: 2x 670W redundant power supplies Remote Access: 1x iDRAC5 cardI purchased the 1950 and the 2950, along with their respective rails, for $100 each on Craigslist, and the seller was kind enough to throw in the 500GB hard drives with the 1950 for an additional $20. All in all, I don’t think it was a bad deal, considering it was my first server.Both servers (as well as the new Cisco equipment) are currently racked in an HP S10614, which is a 14U rack that I purchased very recently on Craigslist. It’s the perfect height for my equipment so far, giving me a decent amount of room to expand in the future and fits snugly in my office. Conveniently, it is almost exactly the same height as my desk, which means it can (and currently is) serving as a side table in addition to holding the majority of my equipment. I plan on taking pictures of my equipment before and after I configure the Cisco router and switch, just to show how much cleaner a rack and some proper gear can make a homelab look and function.That’s all for now! Let me know if you have any comments, questions, or (most importantly) suggestions!" } ]
